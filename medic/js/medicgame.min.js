/*! medic 2017-10-21 */
var audioplayer = {
    muteMusic: !1,
    sounds: {},
    music: {
        1: "assets/audio/track1.mp3"
    },
    currentMusic: null,
    preload: function(game) {
        game.load.audio("fungi", [ "assets/audio/s1.mp3", "assets/audio/bodenstaendig_2000_in_rock_4bit.ogg" ]), 
        game.load.audio("track1", [ "assets/audio/track1.mp3" ]);
    },
    init: function(game) {
        this.sounds.fungi = game.add.audio("fungi"), this.music.track1 = game.add.audio("track1"), 
        this.music.menu = game.add.audio("track1");
    },
    play: function(sound) {
        "off" !== localStorage.getItem("medic-sound") && (this.sounds[sound] ? this.sounds[sound].play() : console.warn("ðŸŽµ Could not find audio for " + sound));
    },
    playMusic: function(id, fade) {
        if (!id) return void console.warn("ðŸŽµ No music id provided");
        var music = this.music[id];
        return music ? this.muteMusic || "off" === localStorage.getItem("medic-music") ? void console.warn("ðŸŽµ Music is muted") : void (this.currentMusic && this.currentMusic.name === music.name && this.currentMusic.isPlaying || (this.currentMusic && this.currentMusic.fadeOut(1500), 
        console.log("ðŸŽµ Play music: " + id + " / " + music.name), fade === !1 ? music.loopFull() : "number" == typeof fade ? music.fadeIn(fade, !0) : music.fadeIn(3e3, !0), 
        this.currentMusic = music)) : void console.warn("ðŸŽµ Cant find music id: " + id);
    },
    stopMusic: function(fade) {
        this.currentMusic && (console.log("ðŸŽµ Stop music"), fade === !1 ? this.currentMusic.stop() : "number" == typeof fade ? this.currentMusic.fadeOut(fade) : this.currentMusic.fadeOut(3e3));
    }
};

BasicGame = {
    score: 0,
    music: null,
    orientated: !1
}, BasicGame.Boot = function(game) {}, BasicGame.Boot.prototype = {
    init: function() {
        var screenDims = Utils.ScreenUtils.screenMetrics;
        this.input.maxPointers = 1, this.stage.disableVisibilityChange = !0, this.scale.pageAlignHorizontally = !0, 
        this.scale.pageAlignVertically = !0, this.scale.scaleMode = Phaser.ScaleManager.USER_SCALE, 
        this.scale.setUserScale(screenDims.scaleX, screenDims.scaleY), this.game.device.desktop || (this.scale.forceOrientation(!0, !1), 
        this.scale.setResizeCallback(this.gameResized, this), this.scale.enterIncorrectOrientation.add(this.enterIncorrectOrientation, this), 
        this.scale.leaveIncorrectOrientation.add(this.leaveIncorrectOrientation, this));
    },
    preload: function() {
        this.load.image("loadscreen1", "assets/images/loadscreen1.png"), this.load.image("preloaderBar", "assets/images/preloader_bar.png");
    },
    create: function() {
        this.state.start("Preloader");
    },
    gameResized: function(width, height) {},
    enterIncorrectOrientation: function() {
        BasicGame.orientated = !1, document.getElementById("orientation").style.display = "block";
    },
    leaveIncorrectOrientation: function() {
        BasicGame.orientated = !0, document.getElementById("orientation").style.display = "none";
    }
};

var enemylib = enemylib || {
    flu: {
        name: "Flu",
        type: "disease",
        damage: 14,
        damageVariation: 5,
        sprite: "",
        lives: 100,
        livesVariation: 3,
        enemySprite: "enemy1"
    },
    cold: {
        name: "Cold",
        type: "disease",
        damage: 5,
        damageVariation: 2,
        sprite: "",
        lives: 90,
        livesVariation: 1,
        enemySprite: "enemy-common-cold"
    },
    stabWound: {
        name: "Stab wound",
        type: "wound",
        damage: 20,
        damageVariation: 6,
        sprite: "",
        lives: 110,
        livesVariation: 20,
        enemySprite: "enemy-stab-wound"
    }
}, gameSession = gameSession || {
    sprites: {},
    spawnOptions: {},
    currentLevel: "123"
}, pickupLog = pickupLog || {}, progressLog = progressLog || {
    destroyedSprites: [],
    revealedSprites: [],
    graves: [],
    addGrave: function(grave) {
        this.graves.push(grave);
    },
    addDestroyedSprite: function(tid) {
        var found = this.destroyedSprites.indexOf(tid);
        found === -1 && this.destroyedSprites.push(tid);
        var found = this.revealedSprites.indexOf(tid);
        found > -1 && this.revealedSprites.splice(found, 1);
    },
    addRevealedSprite: function(tid) {
        var found = this.revealedSprites.indexOf(tid);
        found === -1 && this.revealedSprites.push(tid);
        var found = this.destroyedSprites.indexOf(tid);
        found > -1 && this.destroyedSprites.splice(found, 1);
    },
    isDestroyed: function(tid) {
        var found = this.destroyedSprites.indexOf(tid);
        return found > -1;
    },
    isRevealed: function(tid) {
        var found = this.revealedSprites.indexOf(tid);
        return found > -1;
    }
};

BasicGame.Game = function(game) {
    this.game, this.add, this.camera, this.cache, this.input, this.load, this.math, 
    this.sound, this.stage, this.time, this.tweens, this.world, this.particles, this.physics, 
    this.rnd, medicmenu.eventHub.$on("save", function() {
        var savefile = {
            progressLog: {
                graves: progressLog.graves,
                revealedSprites: progressLog.revealedSprites,
                destroyedSprites: progressLog.destroyedSprites
            },
            currentLevel: gameSession.currentLevel,
            pickupLog: pickupLog,
            score: brew.scoreStore.getters.score,
            items: brew.itemStore.getters.allItems,
            recipes: brew.recipeStore.getters.allRecipes,
            playerHitAreaX: gameSession.sprites.playerHitArea.body.x,
            playerHitAreaY: gameSession.sprites.playerHitArea.body.y
        }, obfuscated = btoa(JSON.stringify(savefile));
        localStorage.setItem("medic-save", obfuscated), console.log("Game saved");
    }.bind(this)), brew.eventHub.$on("showGrave", function(patientTid) {
        for (var grave, patients = gameSession.sprites.patients.children, i = 0; i < patients.length; i++) patients[i].extraProps.tid === patientTid && (grave = {
            x: patients[i].x,
            y: patients[i].y,
            patientTid: patientTid,
            level: gameSession.currentLevel
        }, progressLog.addGrave(grave), this.createGrave(grave));
    }.bind(this)), brew.eventHub.$on("hideSprite", function(tid) {
        var types = [ "blockers", "patients", "pickups", "persons", "ladders", "platforms" ], cat = "";
        progressLog.addDestroyedSprite(tid);
        for (var t = 0; t < types.length; t++) {
            var cat = gameSession.sprites[types[t]];
            if (cat && cat.children.length) for (var i = 0; i < cat.children.length; i++) cat.children[i].extraProps && cat.children[i].extraProps.tid === tid && (cat.children[i].visible = !1, 
            cat.children[i].body && (cat.children[i].body.enable = !1));
        }
    }), brew.eventHub.$on("quitgame", function() {
        this.state.start("MainMenu");
    }.bind(this)), brew.eventHub.$on("revealSprite", function(tid) {
        var types = [ "blockers", "patients", "pickups", "persons", "ladders", "platforms" ], cat = "";
        progressLog.addRevealedSprite(tid);
        for (var t = 0; t < types.length; t++) {
            var cat = gameSession.sprites[types[t]];
            if (cat && cat.children.length) for (var i = 0; i < cat.children.length; i++) cat.children[i].extraProps && cat.children[i].extraProps.tid === tid && (cat.children[i].visible = !0, 
            cat.children[i].body && (cat.children[i].body.enable = !0));
        }
    });
}, BasicGame.Game.prototype = {
    init: function(options) {
        var spawnOptions = {
            direction: "right",
            position: "left"
        };
        localStorage.getItem("medic-levels") ? (console.warn("Using level data from local storage"), 
        levels = JSON.parse(localStorage.getItem("medic-levels"))) : console.warn("Using level data from file"), 
        options && (options.resuming ? (gameSession.currentLevel = options.level, spawnOptions.resuming = !0, 
        spawnOptions.x = options.x, spawnOptions.y = options.y) : (spawnOptions.direction = options.direction, 
        spawnOptions.position = options.position, gameSession.currentLevel = options.level, 
        spawnOptions.spawnAtSprite = options.spawnAtSprite)), gameSession.spawnOptions = spawnOptions, 
        console.log("entering level: " + gameSession.currentLevel + " with options", spawnOptions);
    },
    create: function(game) {
        for (var bg, player, playerX, playerY, ground, portals, ladders, platforms, spawnableLadder, pickups, persons, patients, blockers, savepoints, slopes, levelData, i = 0; i < levels.length; i++) levels[i].levelId === gameSession.currentLevel && (levelData = levels[i]);
        if (gameSession.levelMusic = levelData.levelMusic, audioplayer.playMusic(gameSession.levelMusic), 
        game.world.setBounds(0, 0, Utils.ScreenUtils.screenMetrics.maxGameWidth, Utils.ScreenUtils.screenMetrics.maxGameHeight), 
        bg = this.add.sprite(this.world.centerX, this.world.centerY, levelData.bgSprite), 
        bg.anchor.setTo(.5, .5), game.stage.backgroundColor = "#444444", bg.width = Utils.ScreenUtils.screenMetrics.maxGameWidth, 
        bg.height = Utils.ScreenUtils.screenMetrics.maxGameHeight, levelData.bgs && levelData.bgs.length) {
            bgs = gameSession.sprites.bgs = game.add.group();
            for (var i = 0; i < levelData.bgs.length; i++) var bgSprite = levelData.bgs[i].sprite, bg = bgs.create(levelData.bgs[i].x, levelData.bgs[i].y, bgSprite);
        }
        if (levelData.ladders && levelData.ladders.length) {
            ladders = gameSession.sprites.ladders = game.add.group();
            for (var i = 0; i < levelData.ladders.length; i++) {
                var ladderSprite = levelData.ladders[i].sprite, ladder = ladders.create(levelData.ladders[i].x, levelData.ladders[i].y, ladderSprite);
                ladder.anchor.setTo(0, 0), ladder.extraProps = {
                    direction: levelData.ladders[i].direction,
                    tid: levelData.ladders[i].tid
                }, levelData.ladders[i].hidden && !progressLog.isRevealed(levelData.ladders[i].tid) && (ladder.visible = !1), 
                progressLog.isDestroyed(levelData.ladders[i].tid) && (ladder.visible = !1);
            }
        }
        if (levelData.savepoints && levelData.savepoints.length) {
            savepoints = gameSession.sprites.savepoints = game.add.group();
            for (var i = 0; i < levelData.savepoints.length; i++) {
                var savepointSprite = levelData.savepoints[i].sprite;
                savepoints.create(levelData.savepoints[i].x, levelData.savepoints[i].y, savepointSprite);
            }
        }
        if (levelData.persons && levelData.persons.length) {
            persons = gameSession.sprites.persons = game.add.physicsGroup();
            for (var i = 0; i < levelData.persons.length; i++) {
                var personSprite = levelData.persons[i].sprite, person = persons.create(levelData.persons[i].x, levelData.persons[i].y, personSprite);
                person.anchor.setTo(0, 0), person.extraProps = {
                    questMessage: levelData.persons[i].questMessage,
                    thankYouMessage: levelData.persons[i].thankYouMessage,
                    tid: levelData.persons[i].tid,
                    revives: levelData.persons[i].revives
                }, person.inputEnabled = !0, levelData.persons[i].hidden && !progressLog.isRevealed(levelData.persons[i].tid) && (person.visible = !1, 
                person.body.enable = !1), progressLog.isDestroyed(levelData.persons[i].tid) && (person.visible = !1, 
                person.body.enable = !1), person.events.onInputDown.add(function(sprite) {}, this);
            }
        }
        if (levelData.platforms && levelData.platforms.length) {
            platforms = gameSession.sprites.platforms = game.add.physicsGroup();
            for (var i = 0; i < levelData.platforms.length; i++) {
                var platformSprite = levelData.platforms[i].sprite, platform = platforms.create(levelData.platforms[i].x, levelData.platforms[i].y, platformSprite);
                platform.body.checkCollision.down = !1, platform.body.checkCollision.left = !1, 
                platform.body.checkCollision.right = !1, platform.extraProps = {
                    tid: levelData.platforms[i].tid
                }, levelData.platforms[i].hidden && !progressLog.isRevealed(levelData.platforms[i].tid) && (platform.visible = !1, 
                platform.body.enable = !1), progressLog.isDestroyed(levelData.platforms[i].tid) && (platform.visible = !1, 
                platform.body.enable = !1);
            }
            platforms.setAll("body.immovable", !0);
        }
        for (var gr = (gameSession.sprites.graves = game.add.physicsGroup(), 0); gr < progressLog.graves.length; gr++) this.createGrave(progressLog.graves[gr]);
        if (levelData.groundY || 0 === levelData.groundY) {
            var grounds = gameSession.sprites.grounds = game.add.physicsGroup();
            if (!levelData.noGround) {
                var groundSprite = levelData.groundSprite, ground = grounds.create(0, parseInt(levelData.groundY, 10), groundSprite);
                ground.body.checkCollision.down = !1;
            }
        }
        if (grounds.setAll("body.immovable", !0), levelData.blockers && levelData.blockers.length) {
            blockers = gameSession.sprites.blockers = game.add.physicsGroup();
            for (var i = 0; i < levelData.blockers.length; i++) {
                var blockerSprite = levelData.blockers[i].sprite, blocker = blockers.create(levelData.blockers[i].x, levelData.blockers[i].y, blockerSprite);
                blocker.anchor.setTo(0, 0), blocker.extraProps = {
                    tid: levelData.blockers[i].tid
                }, levelData.blockers[i].hidden && !progressLog.isRevealed(levelData.blockers[i].tid) && (blocker.visible = !1, 
                blocker.body.enable = !1), progressLog.isDestroyed(levelData.blockers[i].tid) && (blocker.visible = !1, 
                blocker.body.enable = !1);
            }
            blockers.setAll("body.immovable", !0);
        }
        if (levelData.slopes && levelData.slopes.length) {
            slopes = gameSession.sprites.slopes = game.add.physicsGroup();
            for (var i = 0; i < levelData.slopes.length; i++) {
                var slopeSprite = levelData.slopes[i].sprite, slope = slopes.create(levelData.slopes[i].x, levelData.slopes[i].y, slopeSprite), slopeSize = levelData.slopes[i].slopeSize;
                slopeSize && (slope.height = slopeSize, slope.width = slopeSize), slope.extraProps = {
                    tid: levelData.slopes[i].tid,
                    direction: levelData.slopes[i].slopeDirection
                }, levelData.slopes[i].hidden && !progressLog.isRevealed(levelData.slopes[i].tid) && (slope.visible = !1, 
                slope.body.enable = !1), progressLog.isDestroyed(levelData.slopes[i].tid) && (slope.visible = !1, 
                slope.body.enable = !1);
            }
            slopes.setAll("body.immovable", !0);
        }
        if (levelData.portals && levelData.portals.length) {
            portals = gameSession.sprites.portals = game.add.physicsGroup();
            for (var i = 0; i < levelData.portals.length; i++) {
                var portalX = levelData.portals[i].x, portalY = levelData.portals[i].y, leads = levelData.portals[i].leads, offset = levelData.portals[i].offset, stretch = levelData.portals[i].stretch, offsetPixelsVertical = 150, offsetPixelsHorizontal = 100, isDoor = levelData.portals[i].door;
                spawnAtSprite = levelData.portals[i].spawnAtSprite, offset && ("up" === leads && (portalY -= offsetPixelsVertical), 
                "down" === leads && (portalY += offsetPixelsVertical), "left" === leads && (portalX -= offsetPixelsHorizontal), 
                "right" === leads && (portalX += offsetPixelsHorizontal));
                var portal = portals.create(portalX, portalY, "portal");
                portal.alpha = 0, portal.anchor.setTo(0, 0), portal.extraProps = {
                    type: levelData.portals[i].type,
                    leads: leads,
                    level: levelData.portals[i].levelId,
                    isDoor: isDoor,
                    spawnAtSprite: spawnAtSprite
                }, isDoor && (portal.body.checkCollision.none = !0), stretch && ("up" !== leads && "down" !== leads || (portal.width = 3e3), 
                "left" !== leads && "right" !== leads || (portal.height = 2e3));
            }
            portals.setAll("body.immovable", !0);
        }
        if (levelData.pickups && levelData.pickups.length) {
            pickups = gameSession.sprites.pickups = game.add.physicsGroup();
            for (var i = 0; i < levelData.pickups.length; i++) {
                var spawnTime, extraProps = {}, tid = levelData.pickups[i].tid, now = new Date().getTime(), spawnOk = !1, pickup = {};
                itemlib[levelData.pickups[i].type] && (spawnTime = levelData.pickups[i].spawnTime || 0, 
                spawnTime = parseInt(spawnTime, 10), pickupLog[tid] ? spawnTime === -1 ? spawnOk = !1 : now - pickupLog[tid] > 1e3 * spawnTime && (spawnOk = !0) : spawnOk = !0, 
                spawnOk && (extraProps = JSON.parse(JSON.stringify(itemlib[levelData.pickups[i].type])), 
                extraProps.tid = levelData.pickups[i].tid, pickup = pickups.create(parseInt(levelData.pickups[i].x, 10), parseInt(levelData.pickups[i].y, 10), extraProps.sprite), 
                pickup.extraProps = extraProps, pickup.anchor.setTo(0, 0), levelData.pickups[i].hidden && !progressLog.isRevealed(levelData.pickups[i].tid) && (pickup.visible = !1, 
                pickup.body.enable = !1), progressLog.isDestroyed(levelData.pickups[i].tid) && (pickup.visible = !1, 
                pickup.body.enable = !1)));
            }
        }
        if (gameSession.spawnOptions.resuming) playerX = gameSession.spawnOptions.x, playerY = gameSession.spawnOptions.y + 100; else if (gameSession.spawnOptions.spawnAtSprite) for (var i = 0; i < levelData.portals.length; i++) gameSession.spawnOptions.spawnAtSprite === levelData.portals[i].tid && (playerX = levelData.portals[i].x, 
        playerY = levelData.portals[i].y + 100); else {
            if (levelData.noGround) {
                if (gameSession.sprites.platforms.length) {
                    var tmpPlatforms = gameSession.sprites.platforms.children.map(function(platform) {
                        return platform;
                    });
                    tmpPlatforms.sort(function(a, b) {
                        return a.x - b.x;
                    }), "left" === gameSession.spawnOptions.position && (playerX = tmpPlatforms[0].x + 50, 
                    playerY = tmpPlatforms[0].y), "right" === gameSession.spawnOptions.position && (playerX = tmpPlatforms[tmpPlatforms.length - 1].x + tmpPlatforms[tmpPlatforms.length - 1].width - 50, 
                    playerY = tmpPlatforms[tmpPlatforms.length - 1].y);
                }
            } else "left" === gameSession.spawnOptions.position && (playerX = 5, playerY = parseInt(levelData.groundY, 10)), 
            "right" === gameSession.spawnOptions.position && (playerX = Utils.ScreenUtils.screenMetrics.gameWidth - 5, 
            playerY = parseInt(levelData.groundY, 10));
            if ("bottom" === gameSession.spawnOptions.position) {
                for (var i = 0; i < ladders.children.length; i++) "down" === ladders.children[i].extraProps.direction && (spawnableLadder = ladders.children[i]);
                playerX = spawnableLadder ? parseInt(spawnableLadder.x, 10) : 100, playerY = Utils.ScreenUtils.screenMetrics.gameHeight + 40;
            }
            if ("top" === gameSession.spawnOptions.position) {
                for (var i = 0; i < ladders.children.length; i++) "up" === ladders.children[i].extraProps.direction && (spawnableLadder = ladders.children[i]);
                playerX = spawnableLadder ? spawnableLadder.x : 100, playerY = 100;
            }
        }
        if (player = gameSession.sprites.player = game.add.sprite(playerX, playerY, "player"), 
        player.animations.add("walk", [ 1, 2, 3, 4, 5, 6, 7, 8 ], 18, !0), console.log("Player spawned at", playerX, playerY), 
        player.anchor.setTo(.5, 1), playerHitArea = gameSession.sprites.playerHitArea = game.add.sprite(playerX - 4, playerY, "playerHitArea"), 
        playerHitArea.anchor.setTo(.5, 1), playerHitArea.alpha = 0, game.physics.arcade.enable(player), 
        game.physics.arcade.enable(playerHitArea), playerHitArea.body.gravity.y = 3e3, game.camera.follow(player), 
        levelData.patients && levelData.patients.length) {
            patients = gameSession.sprites.patients = game.add.physicsGroup();
            for (var i = 0; i < levelData.patients.length; i++) {
                var patientSprite = levelData.patients[i].sprite, patient = patients.create(levelData.patients[i].x, levelData.patients[i].y, patientSprite);
                patient.anchor.setTo(0, 0), patient.extraProps = {
                    sprite: levelData.patients[i].sprite,
                    enemy: levelData.patients[i].enemy,
                    lives: levelData.patients[i].lives,
                    saveMessage: levelData.patients[i].saveMessage,
                    reward: levelData.patients[i].reward,
                    rewardQty: levelData.patients[i].rewardQty,
                    revealTid: levelData.patients[i].revealTid,
                    hideTid: levelData.patients[i].hideTid,
                    tid: levelData.patients[i].tid
                }, patient.inputEnabled = !0, levelData.patients[i].hidden && !progressLog.isRevealed(levelData.patients[i].tid) && (patient.visible = !1, 
                patient.body.enable = !1), progressLog.isDestroyed(levelData.patients[i].tid) && (patient.visible = !1, 
                patient.body.enable = !1), patient.events.onInputDown.add(function(sprite) {
                    this.checkOverlap(gameSession.sprites.player, sprite) && brew.eventHub.$emit("startBattle", sprite.extraProps);
                }, this);
            }
        }
        cursors = game.input.keyboard.createCursorKeys(), jumpButton = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
    },
    createGrave: function(grave) {
        if (grave.level === gameSession.currentLevel) {
            var newgrave = gameSession.sprites.graves.create(grave.x, grave.y, "grave");
            newgrave.extraProps = {
                patientTid: grave.patientTid
            }, newgrave.anchor.setTo(.5, .5);
        }
    },
    update: function(game) {
        var me = this, player = gameSession.sprites.player, playerHitArea = gameSession.sprites.playerHitArea, grounds = gameSession.sprites.grounds, portals = gameSession.sprites.portals, pickups = gameSession.sprites.pickups, platforms = gameSession.sprites.platforms, ladders = gameSession.sprites.ladders, blockers = (gameSession.sprites.persons, 
        gameSession.sprites.blockers), slopes = (gameSession.sprites.savepoints, gameSession.sprites.slopes);
        game.physics.arcade.collide(playerHitArea, grounds), game.physics.arcade.collide(playerHitArea, pickups, this.onPickupCollision, null, game), 
        game.physics.arcade.collide(playerHitArea, platforms), game.physics.arcade.collide(playerHitArea, blockers), 
        game.physics.arcade.collide(playerHitArea, portals, this.onPortalCollision, null, game), 
        playerHitArea.body.velocity.x = 0, this.checkGroupOverlap(playerHitArea, ladders).overlaps ? (playerHitArea.body.allowGravity = !1, 
        playerHitArea.body.velocity.y = 0) : playerHitArea.body.allowGravity = !0;
        var overl = this.checkGroupOverlap(playerHitArea, slopes), tempPlayerY = playerHitArea.body.y;
        if (overl.overlaps) {
            var playerNotAtVeryTop = playerHitArea.body.y + playerHitArea.body.height > overl.sprite.y;
            if (playerNotAtVeryTop) {
                var dX = 0;
                "upRight" === overl.sprite.extraProps.direction ? (dX = Math.ceil(player.body.x + player.body.width / 2 - overl.sprite.x), 
                dX = Math.max(dX, 0), dX = Math.min(dX, overl.sprite.width - 1)) : "upLeft" === overl.sprite.extraProps.direction ? (dX = overl.sprite.width - Math.ceil(player.body.x + player.body.width / 2 - overl.sprite.x), 
                dX = Math.max(dX, 0), dX = Math.min(dX, overl.sprite.width - 1)) : console.warn("Slope missing direction", overl.sprite.extraProps);
                var newY = overl.sprite.y + overl.sprite.height - playerHitArea.body.height - dX;
                newY > tempPlayerY - 10 && (playerHitArea.body.y = newY), playerHitArea.body.gravity.y = 0;
            }
        } else playerHitArea.body.gravity.y = 3e3;
        me.handleTouchInput(game), me.handleKeyboardInput(), player.y = playerHitArea.y, 
        player.x = playerHitArea.x, 0 === playerHitArea.body.velocity.x && (player.animations.stop("walk"), 
        player.animations.frame = 8);
    },
    movePlayer: function(dir) {
        var player = gameSession.sprites.player, playerHitArea = gameSession.sprites.playerHitArea, ladders = gameSession.sprites.ladders;
        gameSession.sprites.slopes;
        switch (dir) {
          case "up":
            this.checkGroupOverlap(playerHitArea, ladders).overlaps && (playerHitArea.body.velocity.y = -250);
            break;

          case "down":
            this.checkGroupOverlap(playerHitArea, ladders).overlaps && (playerHitArea.body.velocity.y = 250);
            break;

          case "left":
            playerHitArea.body.velocity.x = -250, player.play("walk"), player.scale.x > 0 && (player.scale.x = -1);
            break;

          case "right":
            playerHitArea.body.velocity.x = 250, player.play("walk"), player.scale.x < 0 && (player.scale.x = 1);
        }
    },
    handleTouchInput: function(game) {
        var dir, game = me = this, pointer1 = (game.input.activePointer, game.input.pointer1), cursor = game.input.mousePointer, gameWidth = Utils.ScreenUtils.screenMetrics.gameWidth, gameHeight = Utils.ScreenUtils.screenMetrics.gameHeight;
        (cursor.isDown || pointer1.isDown) && (cursor.isDown && (cursor.x < gameWidth / 3 ? dir = "left" : cursor.x > gameWidth / 3 * 2 ? dir = "right" : cursor.y < gameHeight / 3 ? dir = "up" : cursor.y > gameHeight / 3 * 2 && (dir = "down")), 
        pointer1.isDown && (pointer1.x < gameWidth / 3 ? dir = "left" : pointer1.x > gameWidth / 3 * 2 ? dir = "right" : pointer1.y < gameHeight / 3 ? dir = "up" : pointer1.y > gameHeight / 3 * 2 && (dir = "down")), 
        me.handleKeyboardInput(dir));
    },
    handleKeyboardInput: function(vDir) {
        var visiblewindows;
        gameSession.sprites.player;
        if (cursors.left.isDown && !cursors.right.isDown || "left" === vDir) {
            if (visiblewindows = document.getElementsByClassName("window"), visiblewindows && visiblewindows.length) return;
            this.movePlayer("left");
        } else if (cursors.right.isDown && !cursors.left.isDown || "right" === vDir) {
            if (visiblewindows = document.getElementsByClassName("window"), visiblewindows && visiblewindows.length) return;
            this.movePlayer("right");
        } else if (cursors.up.isDown && !cursors.down.isDown || "up" === vDir) {
            if (visiblewindows = document.getElementsByClassName("window"), visiblewindows && visiblewindows.length) return;
            overlapresultPortals = this.checkGroupOverlap(gameSession.sprites.player, gameSession.sprites.portals), 
            overlapresultPortals.overlaps ? overlapresultPortals.sprite && overlapresultPortals.sprite.extraProps && overlapresultPortals.sprite.extraProps.isDoor && this.onPortalCollision(gameSession.sprites.player, overlapresultPortals.sprite) : this.movePlayer("up");
        } else if (cursors.down.isDown && !cursors.up.isDown || "down" === vDir) {
            if (visiblewindows = document.getElementsByClassName("window"), visiblewindows && visiblewindows.length) return;
            if (overlapResultPatient = this.checkGroupOverlap(gameSession.sprites.player, gameSession.sprites.patients), 
            overlapResultPerson = this.checkGroupOverlap(gameSession.sprites.player, gameSession.sprites.persons), 
            overlapResultGrave = this.checkGroupOverlap(gameSession.sprites.player, gameSession.sprites.graves), 
            overlapResultSavePoint = this.checkGroupOverlap(gameSession.sprites.player, gameSession.sprites.savepoints), 
            overlapResultPatient.overlaps) brew.eventHub.$emit("startBattle", overlapResultPatient.sprite.extraProps); else if (overlapResultPerson.overlaps) if (progressLog.graves.length > 0) {
                var personRevivesArr, pTid, personRevives = overlapResultPerson.sprite.extraProps.revives;
                if (personRevives) {
                    if (1 === brew.scoreStore.getters.score.life) return void (localStorage.getItem("medic-save") ? brew.eventHub.$emit("displayMessage", {
                        msgHeader: "You failed",
                        msg: "You failed. Restart?",
                        closeCallback: function(btn) {
                            medicmenu.eventHub.$emit("continue");
                        }
                    }) : brew.eventHub.$emit("displayMessage", {
                        msgHeader: "You failed",
                        msg: "Game over. Now leave this land.",
                        scope: this,
                        closeCallback: function(btn) {
                            this.gameOver();
                        }
                    }));
                    personRevivesArr = personRevives.split(","), brew.eventHub.$emit("displayMessage", {
                        msgHeader: "",
                        msg: "You have failed. I will revive the one who slumbers, but I will need a sacrifice. It will cost you some life.",
                        closeCallback: function(btn) {
                            brew.eventHub.$emit("decreaseLife", 1);
                        }
                    });
                    for (var i = progressLog.graves.length - 1; i >= 0; i--) {
                        pTid = progressLog.graves[i].patientTid;
                        for (var j = 0; j < personRevivesArr.length; j++) if (pTid === personRevivesArr[j]) {
                            brew.eventHub.$emit("revealSprite", pTid);
                            for (var g = gameSession.sprites.graves.children.length - 1; g >= 0; g--) gameSession.sprites.graves.children[g].extraProps.patientTid === pTid && gameSession.sprites.graves.children[g].destroy();
                            progressLog.graves.splice(i, 1);
                        }
                    }
                }
                progressLog.graves = [];
            } else brew.eventHub.$emit("displayMessage", {
                msg: overlapResultPerson.sprite.extraProps.questMessage
            }); else overlapResultGrave.overlaps ? brew.eventHub.$emit("displayMessage", {
                msgHeader: "The grave stone reads:",
                msg: "The one who slumbers does not sleep.<br> The one who can awaken <i>is awaiting your sacrifice</i>."
            }) : overlapResultSavePoint.overlaps ? brew.eventHub.$emit("displayMessage", {
                msgHeader: "Statue Of Our Saviour",
                msg: 'The plaque reads:<br>"Bear true allegiance to our Saviour and your spirit shall be engraved in the memory of this land 4-ever."',
                scope: this,
                buttons: [ "CANCEL", "SAVE" ],
                closeCallback: function(btn) {
                    "SAVE" === btn && (medicmenu.eventHub.$emit("save"), brew.eventHub.$emit("displayMessage", {
                        msgHeader: "Game saved",
                        msg: "The game has been saved"
                    }));
                }
            }) : this.movePlayer("down");
        }
    },
    onPickupCollision: function(player, pickup) {
        var props = pickup.extraProps;
        props.type + "s";
        console.log("Picked up a " + props.name), brew.eventHub.$emit("addItem", {
            id: props.id,
            qty: 1
        }), pickupLog[props.tid] = new Date().getTime(), pickup.kill(), audioplayer.play(props.category);
    },
    onPortalCollision: function(player, portal) {
        var spawnOptions = {};
        portal.extraProps && ("right" === portal.extraProps.leads && (spawnOptions = {
            level: portal.extraProps.level,
            direction: "right",
            position: "left"
        }), "left" === portal.extraProps.leads && (spawnOptions = {
            level: portal.extraProps.level,
            direction: "left",
            position: "right"
        }), "up" === portal.extraProps.leads && (spawnOptions = {
            level: portal.extraProps.level,
            direction: "up",
            position: "bottom"
        }), "down" === portal.extraProps.leads && (spawnOptions = {
            level: portal.extraProps.level,
            direction: "down",
            position: "top"
        }), portal.extraProps.spawnAtSprite && (spawnOptions.spawnAtSprite = portal.extraProps.spawnAtSprite)), 
        this.state.start(this.state.current, !0, !1, spawnOptions);
    },
    checkOverlap: function(spriteA, spriteB) {
        var boundsA = spriteA.getBounds(), boundsB = spriteB.getBounds();
        return Phaser.Rectangle.intersects(boundsA, boundsB);
    },
    checkGroupOverlap: function(sprite, group) {
        var overlappingSprite = {};
        if (!sprite || !group) return !1;
        for (var overlaps = !1, spriteBounds = sprite.getBounds(), i = (group.children.map(function(sprite) {
            return sprite.getBounds();
        }), 0); i < group.children.length; i++) Phaser.Rectangle.intersects(spriteBounds, group.children[i].getBounds()) && group.children[i].visible && (overlaps = !0, 
        overlappingSprite = group.children[i]);
        return {
            overlaps: overlaps,
            sprite: overlappingSprite
        };
    },
    quitGame: function(pointer) {
        this.state.start("MainMenu");
    },
    gameOver: function() {
        brew.eventHub.$emit("hideTopMenu"), medicmenu.eventHub.$emit("showMainMenu"), this.state.start("MainMenu");
    }
}, itemlib = {
    mushroom: {
        type: "material",
        category: "fungi",
        sprite: "mushroom",
        id: "mushroom",
        name: "Mushroom",
        qty: 0,
        props: [ {
            prop: "flu",
            strength: -200,
            name: "Flu"
        }, {
            prop: "cold",
            strength: 40,
            name: "Cold"
        }, {
            prop: "darkness",
            strength: 30,
            name: "Darkness"
        } ],
        fortifies: [ {
            prop: "cold",
            factor: 1.5,
            name: "Cold"
        } ],
        spawntime: null
    },
    flyAgaric: {
        type: "material",
        category: "fungi",
        sprite: "flyAgaric",
        id: "flyAgaric",
        name: "Fly agaric",
        qty: 1,
        props: [ {
            prop: "goodLuck",
            strength: 100,
            name: "Good luck"
        }, {
            prop: "bites",
            strength: 100,
            name: "Snake & insect bites"
        }, {
            prop: "insects",
            strength: 100,
            name: "Insects"
        } ],
        fortifies: [ {
            prop: "insects",
            factor: 3,
            name: "Insects"
        }, {
            prop: "bites",
            factor: 2,
            name: "Snake & insect bites"
        } ],
        spawntime: null
    },
    bearbile: {
        type: "material",
        category: "animalia",
        sprite: "bearbile",
        name: "Bear bile",
        id: "bearbile",
        qty: 0,
        props: [ {
            prop: "wound",
            strength: 50,
            name: "Wounds"
        }, {
            prop: "sickness",
            strength: 40,
            name: "Sickness"
        }, {
            prop: "flu",
            strength: 40,
            name: "Flu"
        } ],
        fortifies: [ {
            prop: "sickness",
            factor: 1.5,
            name: "Sickness"
        }, {
            prop: "flu",
            factor: 1.5,
            name: "Flu"
        }, {
            prop: "wound",
            factor: 2,
            name: "Wounds"
        } ],
        spawntime: null
    },
    batsBlood: {
        type: "material",
        category: "animalia",
        sprite: "batsBlood",
        name: "Bats blood",
        id: "batsBlood",
        qty: 0,
        props: [ {
            prop: "eyeDisease",
            strength: 200,
            name: "Eye disease"
        } ],
        fortifies: [ {
            prop: "eyeDisease",
            factor: 1.5,
            name: "Eye disease"
        } ],
        spawntime: null
    },
    dragonsBlood: {
        type: "material",
        category: "animalia",
        sprite: "dragonsBlood",
        name: "Dragons blood",
        id: "dragonsBlood",
        qty: 0,
        props: [ {
            prop: "disease",
            strength: 230,
            name: "Disease"
        } ],
        fortifies: [ {
            prop: "disease",
            factor: 2,
            name: "Disease"
        } ],
        spawntime: null
    },
    duck: {
        type: "material",
        category: "animalia",
        sprite: "duck",
        name: "Duck",
        id: "duck",
        qty: 0,
        props: [ {
            prop: "disease",
            strength: 100,
            name: "Disease"
        } ],
        spawntime: null
    },
    giantCentipede: {
        type: "material",
        category: "animalia",
        sprite: "giantCentipede",
        name: "Giant centipede",
        id: "giantCentipede",
        qty: 0,
        props: [ {
            prop: "evil",
            strength: 150,
            name: "Evil"
        } ],
        spawntime: null
    },
    batsEyes: {
        type: "material",
        category: "animalia",
        sprite: "batsEyes",
        name: "Bats eyes",
        id: "batsEyes",
        qty: 0,
        props: [ {
            prop: "invisibility",
            strength: 150,
            name: "Invisibility"
        } ],
        spawntime: null
    },
    bearPaw: {
        type: "material",
        category: "animalia",
        sprite: "bearPaw",
        name: "Dried bear paw",
        id: "bearPaw",
        qty: 0,
        props: [ {
            prop: "pain",
            strength: 100,
            name: "Pain"
        } ],
        spawntime: null
    },
    owlClaw: {
        type: "material",
        category: "animalia",
        sprite: "owlClaw",
        name: "Owl claw",
        id: "owlClaw",
        qty: 0,
        props: [ {
            prop: "goodLuck",
            strength: 100,
            name: "Good luck"
        } ],
        spawntime: null
    },
    ravenGall: {
        type: "material",
        category: "animalia",
        sprite: "ravenGall",
        name: "Raven Gall",
        id: "ravenGall",
        qty: 0,
        props: [ {
            prop: "blackMagic",
            strength: 100,
            name: "Black magic"
        }, {
            prop: "dispelDarkness",
            strength: 100,
            name: "Dispel darkness"
        }, {
            prop: "evil",
            strength: 100,
            name: "Evil"
        } ],
        spawntime: null
    },
    snail: {
        type: "material",
        category: "animalia",
        sprite: "snail",
        name: "Snail",
        id: "snail",
        qty: 0,
        props: [ {
            prop: "eyeDisease",
            strength: 100,
            name: "Eye disease"
        }, {
            prop: "cough",
            strength: 100,
            name: "Cough"
        } ],
        spawntime: null
    },
    amethyst: {
        type: "material",
        category: "mineral",
        sprite: "amethyst",
        name: "Amethyst",
        id: "amethyst",
        qty: 0,
        props: [ {
            prop: "memory",
            strength: 50,
            name: "Memory"
        } ],
        fortifies: [ {
            prop: "memory",
            factor: 1.5,
            name: "Memory"
        } ],
        spawntime: null
    },
    amberCalcite: {
        type: "material",
        category: "mineral",
        sprite: "amberCalcite",
        name: "Amber calcite",
        id: "amberCalcite",
        qty: 0,
        props: [ {
            prop: "memory",
            strength: 70,
            name: "Memory"
        } ],
        spawntime: null
    },
    blackTourmaline: {
        type: "material",
        category: "mineral",
        sprite: "blackTourmaline",
        name: "Black tourmaline",
        id: "blackTourmaline",
        qty: 0,
        props: [ {
            prop: "blackMagic",
            strength: 100,
            name: "Black magic"
        } ],
        fortifies: [ {
            prop: "blackMagic",
            factor: 3,
            name: "Black magic"
        } ],
        spawntime: null
    },
    plant: {
        type: "material",
        category: "plantae",
        sprite: "plant",
        name: "Rosemary",
        id: "plant",
        qty: 0,
        props: [ {
            prop: "flu",
            strength: 5,
            name: "Flu"
        }, {
            prop: "cold",
            strength: 10,
            name: "Cold"
        }, {
            prop: "cough",
            strength: 30,
            name: "Cough"
        } ],
        fortifies: [ {
            prop: "cold",
            factor: 1.5,
            name: "Cold"
        } ],
        spawntime: null
    },
    heather: {
        type: "material",
        category: "plantae",
        sprite: "heather",
        name: "Heather",
        id: "heather",
        qty: 0,
        props: [ {
            prop: "goodLuck",
            strength: 100,
            name: "Good luck"
        } ],
        fortifies: [ {
            prop: "goodLuck",
            factor: 2,
            name: "Good luck"
        } ]
    },
    falseUnicornRoot: {
        type: "material",
        category: "plantae",
        sprite: "falseUnicornRoot",
        name: "False unicorn root",
        id: "falseUnicornRoot",
        qty: 0,
        props: [ {
            prop: "dispelDarkness",
            strength: 100,
            name: "Dispel darkness"
        }, {
            prop: "evil",
            strength: 100,
            name: "Evil"
        } ],
        fortifies: [ {
            prop: "evil",
            factor: 1.5,
            name: "Evil"
        } ]
    },
    chamomile: {
        type: "material",
        category: "plantae",
        sprite: "chamomile",
        name: "Chamomile",
        id: "chamomile",
        qty: 0,
        props: [ {
            prop: "Insomnia",
            strength: 100,
            name: "Insomnia"
        } ]
    },
    foxglove: {
        type: "material",
        category: "plantae",
        sprite: "foxglove",
        name: "Foxglove",
        id: "foxglove",
        qty: 0,
        props: [ {
            prop: "heartDisease",
            strength: 100,
            name: "Heart disease"
        } ]
    },
    milkweed: {
        type: "material",
        category: "plantae",
        sprite: "milkweed",
        name: "Milkweed",
        id: "milkweed",
        qty: 0,
        props: [ {
            prop: "healWounds",
            strength: 100,
            name: "Heal wounds"
        } ]
    },
    oakBark: {
        type: "material",
        category: "plantae",
        sprite: "oarkBark",
        name: "Oak bark",
        id: "oakBark",
        qty: 0,
        props: [ {
            prop: "abdomenPain",
            strength: 100,
            name: "Abdomen pain"
        }, {
            prop: "disease",
            strength: 100,
            name: "Disease"
        } ]
    },
    peppermint: {
        type: "material",
        category: "plantae",
        sprite: "peppermint",
        name: "Peppermint",
        id: "peppermint",
        qty: 0,
        props: [ {
            prop: "flu",
            strength: 100,
            name: "Flu"
        }, {
            prop: "insects",
            strength: 100,
            name: "Insects"
        } ]
    },
    thyme: {
        type: "material",
        category: "plantae",
        sprite: "thyme",
        name: "Thyme",
        id: "thyme",
        qty: 0,
        props: [ {
            prop: "wound",
            strength: 100,
            name: "Wounds"
        }, {
            prop: "cough",
            strength: 100,
            name: "Cough"
        }, {
            prop: "insects",
            strength: 100,
            name: "Insects"
        } ]
    },
    figwort: {
        type: "material",
        category: "plantae",
        sprite: "figwort",
        name: "Figwort",
        id: "figwort",
        qty: 0,
        props: [ {
            prop: "wound",
            strength: 100,
            name: "Wounds"
        }, {
            prop: "burns",
            strength: 100,
            name: "Burns"
        } ]
    },
    dogRose: {
        type: "material",
        category: "plantae",
        sprite: "dogRose",
        name: "Dog rose",
        id: "dogRose",
        qty: 0,
        props: [ {
            prop: "insomnia",
            strength: 100,
            name: "Insomnia"
        }, {
            prop: "scurvy",
            strength: 100,
            name: "Scurvy"
        } ]
    }
};

var levels = [ {
    groundY: 550,
    groundSprite: "ground1",
    ladders: [ {
        x: 500,
        y: 550,
        direction: "up",
        sprite: "ladder1"
    } ],
    platforms: [ {
        x: 550,
        y: 200,
        sprite: "platform1"
    } ],
    portals: [ {
        type: "path",
        level: 0,
        x: "left",
        y: "ground"
    }, {
        type: "path",
        level: 1,
        x: "right",
        y: "ground"
    }, {
        type: "ladder",
        level: 2,
        x: 500,
        y: "top"
    } ],
    pickups: [ {
        x: 400,
        y: 550,
        type: "mushroom"
    }, {
        x: 200,
        y: 550,
        type: "amethyst"
    }, {
        x: 600,
        y: 200,
        type: "amberCalcite"
    }, {
        x: 730,
        y: 200,
        type: "blackTourmaline"
    }, {
        x: 450,
        y: 550,
        type: "mushroom"
    }, {
        x: 650,
        y: 550,
        type: "plant"
    }, {
        x: 1e3,
        y: 550,
        type: "bearbile"
    } ],
    persons: [ {
        x: 900,
        y: 550,
        sprite: "witch1",
        questMessage: "- Young medic. Deep in these woods lives the rat bat. Rat bat has come down with a nasty flu. Quick! Do not hesitate! Rush there and help!",
        thankYouMessage: "- Thank you for helping rat bat. Order has finally been restored in these woods."
    } ],
    patients: [ {
        x: 1100,
        y: 578,
        sprite: "patient1",
        enemy: "flu",
        lives: 20
    } ]
}, {
    groundY: 250,
    groundSprite: "ground1",
    ladders: [ {
        x: 700,
        y: 250,
        direction: "up",
        sprite: "ladder1"
    }, {
        x: 100,
        y: 250,
        direction: "up",
        sprite: "ladder1"
    } ],
    platforms: [],
    portals: [ {
        type: "path",
        level: 0,
        x: "left",
        y: "ground"
    }, {
        type: "path",
        level: 1,
        x: "right",
        y: "ground"
    }, {
        type: "ladder",
        level: 2,
        x: 100,
        y: "top"
    }, {
        type: "ladder",
        level: 2,
        x: 700,
        y: "top"
    } ]
}, {
    groundY: null,
    groundSprite: null,
    ladders: [ {
        x: 100,
        y: 450,
        direction: "down",
        sprite: "ladder1"
    } ],
    platforms: [],
    pickups: [ {
        x: 100,
        y: 450,
        type: "mushroom"
    } ],
    portals: [ {
        type: "ladder",
        level: 0,
        x: 100,
        y: "bottom"
    } ]
} ], levels = [ {
    levelId: "123",
    groundY: "636",
    groundSprite: "ground1",
    bgSprite: "bg1b",
    levelName: "Startbana",
    ladders: [ {
        tid: "1496177168737",
        x: 594,
        y: -324,
        sprite: "ladder1",
        direction: "up",
        hidden: !1
    } ],
    platforms: [ {
        tid: "1498504715797",
        x: 633,
        y: 254,
        sprite: "platform1",
        levelId: "",
        hidden: !1
    } ],
    portals: [ {
        tid: "1496175875590",
        x: 1360,
        y: 537,
        sprite: "portal",
        level: "bana567",
        levelId: "456",
        leads: "right",
        offset: !0
    }, {
        tid: "1496693812069",
        x: 582,
        y: 1,
        sprite: "portal",
        levelId: "1496427681086",
        leads: "up",
        offset: !0,
        stretch: !0
    }, {
        tid: "1500237065908",
        x: 432,
        y: 539,
        sprite: "door",
        levelId: "1500237137016",
        door: !0,
        leads: "right",
        spawnAtSprite: "1500239015163"
    }, {
        tid: "1500634570585",
        x: -1,
        y: 533,
        sprite: "portal",
        levelId: "1500634511430",
        leads: "left",
        offset: !0,
        stretch: !0
    } ],
    pickups: [ {
        tid: "1494702838054",
        x: 306,
        y: 598,
        sprite: "mushroom",
        pickupType: "mushroom",
        spawnTime: "10",
        type: "mushroom"
    }, {
        tid: "1496088467007",
        x: 521,
        y: 577,
        sprite: "bearbile",
        pickupType: "bearbile",
        spawnTime: "15",
        hidden: !1,
        type: "bearbile"
    }, {
        tid: "1498504686345",
        x: 710,
        y: 219,
        sprite: "mushroom",
        levelId: "",
        pickupType: "mushroom",
        spawnTime: "30",
        hidden: !1,
        type: "mushroom"
    }, {
        tid: "1500154864714",
        x: 811,
        y: 177,
        sprite: "dogRose",
        levelId: "",
        pickupType: "dogRose",
        spawnTime: "10",
        type: "dogRose"
    }, {
        tid: "1500154894560",
        x: 903,
        y: 583,
        sprite: "thyme",
        levelId: "",
        pickupType: "thyme",
        spawnTime: "10",
        type: "thyme"
    }, {
        tid: "1500154966593",
        x: 1322,
        y: 582,
        sprite: "peppermint",
        levelId: "",
        pickupType: "peppermint",
        spawnTime: "10",
        type: "peppermint"
    } ],
    persons: [ {
        tid: "1498844147012",
        x: 338,
        y: 557,
        sprite: "witch1",
        levelId: "",
        questMessage: "Traveller! You must save him! There is only so much I can do with spells. This man has come down with a nasty <b>flu</b>. He needs treatment, quick!",
        thankYouMessage: "Thank you Medic!",
        hidden: !1,
        revives: "1498500458042,1494702838054"
    } ],
    patients: [ {
        tid: "1498500458042",
        x: 1e3,
        y: 619,
        sprite: "patient1",
        levelId: "",
        lives: "30",
        enemy: "flu",
        saveMessage: "Thank you! You saved my life. Take this piece of <b>amber calcite</b> as a token of gratitude. May it help you in your quest.\n<br><br>\nI will also <i>remove this big boulder</i> for you.",
        reward: "amberCalcite",
        rewardQty: "3",
        revealTid: "",
        hideTid: "1499001335462",
        hidden: !1
    }, {
        tid: "1500582495531",
        x: 587,
        y: 614,
        sprite: "patient4",
        levelId: "",
        lives: "10",
        enemy: "stabWound",
        saveMessage: "Thank you for saving me!"
    }, {
        tid: "1505934892514",
        x: 926,
        y: 242,
        sprite: "patient5",
        levelId: "",
        lives: "200",
        enemy: "cold",
        saveMessage: "Thanks, you're my hero!",
        reward: "duck",
        rewardQty: "1"
    } ],
    blockers: [ {
        tid: "1499001335462",
        x: 1099,
        y: 416,
        sprite: "rock1",
        levelId: ""
    } ],
    savepoints: [ {
        tid: "1507148319425",
        x: 816,
        y: 500,
        sprite: "savestatue",
        levelId: ""
    } ],
    slopes: [],
    bgs: [ {
        tid: "1499003433945",
        x: 2,
        y: 424,
        sprite: "bush1",
        levelId: ""
    }, {
        tid: "1499004613672",
        x: 211,
        y: 497,
        sprite: "bush1",
        levelId: ""
    }, {
        tid: "1499004629208",
        x: 446,
        y: 452,
        sprite: "bush1",
        levelId: ""
    }, {
        tid: "1499004638231",
        x: 623,
        y: 552,
        sprite: "bush1",
        levelId: ""
    }, {
        tid: "1499004646207",
        x: 832,
        y: 337,
        sprite: "bush1",
        levelId: "",
        hidden: !1
    }, {
        tid: "1499273399772",
        x: 270,
        y: 300,
        sprite: "tent1",
        levelId: ""
    } ]
}, {
    levelId: "456",
    groundY: "635",
    groundSprite: "ground1",
    bgSprite: "bg2",
    levelName: "Bana 2",
    ladders: [ {
        tid: "1505935826496",
        x: 207,
        y: 235,
        sprite: "ladder1",
        levelId: ""
    } ],
    platforms: [ {
        tid: "1496694171361",
        x: 247,
        y: 240,
        sprite: "platform1",
        levelId: ""
    }, {
        tid: "1496694197191",
        x: 846,
        y: 396,
        sprite: "platform1",
        levelId: ""
    } ],
    portals: [ {
        tid: "1496694262835",
        x: 1361,
        y: 534,
        sprite: "portal",
        levelId: "123",
        leads: "right",
        offset: !0
    }, {
        tid: "1497730087537",
        x: -1,
        y: 537,
        sprite: "portal",
        levelId: "123",
        leads: "left",
        offset: !0,
        stretch: !0
    } ],
    pickups: [ {
        tid: "1496694236791",
        x: 919,
        y: 349,
        sprite: "blackTourmaline",
        levelId: "",
        pickupType: "blackTourmaline",
        spawnTime: "-1",
        type: "blackTourmaline"
    }, {
        tid: "1499274380405",
        x: 1234,
        y: 578,
        sprite: "plant",
        levelId: "",
        pickupType: "plant",
        spawnTime: "10",
        type: "plant"
    }, {
        tid: "1499274406460",
        x: 1191,
        y: 577,
        sprite: "plant",
        levelId: "",
        pickupType: "plant",
        spawnTime: "10",
        type: "plant"
    }, {
        tid: "1500409157283",
        x: 379,
        y: 177,
        sprite: "duck",
        levelId: "",
        pickupType: "duck",
        type: "duck"
    }, {
        tid: "1500409279208",
        x: 1106,
        y: 562,
        sprite: "giantCentipede",
        levelId: "",
        pickupType: "giantCentipede",
        type: "giantCentipede"
    } ],
    persons: [ {
        tid: "1499274340985",
        x: 593,
        y: 167,
        sprite: "witch2",
        levelId: "",
        questMessage: "Thank you for helping!"
    } ],
    patients: [],
    blockers: [],
    slopes: [],
    bgs: []
}, {
    levelId: "1496427681086",
    groundY: "100",
    groundSprite: "ground1",
    bgSprite: "",
    levelName: "Bana 3",
    ladders: [ {
        tid: "1497386994753",
        x: 597,
        y: 592,
        sprite: "ladder1",
        levelId: "",
        direction: "down"
    } ],
    platforms: [ {
        tid: "1497387810727",
        x: 640,
        y: 594,
        sprite: "platform1",
        levelId: ""
    }, {
        tid: "1497387822124",
        x: 89,
        y: 770,
        sprite: "platform1",
        levelId: ""
    } ],
    portals: [ {
        tid: "1497387889691",
        x: 580,
        y: 861,
        sprite: "portal",
        levelId: "123",
        leads: "down",
        offset: !0,
        stretch: !0
    }, {
        tid: "1497730153541",
        x: 3,
        y: -2,
        sprite: "portal",
        levelId: "123",
        leads: "left",
        offset: !0,
        stretch: !0
    } ],
    pickups: [ {
        tid: "1497387842047",
        x: 318,
        y: 709,
        sprite: "amberCalcite",
        levelId: "",
        pickupType: "amberCalcite",
        spawnTime: "-1",
        type: "amberCalcite"
    }, {
        tid: "1500410646265",
        x: 1060,
        y: 492,
        sprite: "foxglove",
        levelId: "",
        pickupType: "foxglove",
        type: "foxglove"
    }, {
        tid: "1500410658787",
        x: 978,
        y: 533,
        sprite: "ravenGall",
        levelId: "",
        pickupType: "ravenGall",
        type: "ravenGall"
    }, {
        tid: "1500410673108",
        x: 886,
        y: 535,
        sprite: "chamomile",
        levelId: "",
        pickupType: "chamomile",
        type: "chamomile"
    } ],
    persons: [],
    patients: [],
    blockers: [],
    bgs: []
}, {
    levelId: "1500237137016",
    groundY: "-600",
    noGround: !0,
    groundSprite: "ground1",
    bgSprite: "bg1-tent",
    levelName: "tent",
    ladders: [],
    platforms: [ {
        tid: "1500238536835",
        x: 367,
        y: 429,
        sprite: "platform-tent",
        levelId: ""
    } ],
    portals: [ {
        tid: "1500239015163",
        x: 710,
        y: 327,
        sprite: "door",
        levelId: "123",
        door: !0,
        spawnAtSprite: "1500237065908",
        leads: "right"
    } ],
    pickups: [ {
        tid: "1500241320627",
        x: 378,
        y: 269,
        sprite: "bearbile",
        levelId: "",
        pickupType: "bearbile",
        type: "bearbile"
    }, {
        tid: "1500241556676",
        x: 393,
        y: 350,
        sprite: "batsBlood",
        levelId: "",
        pickupType: "batsBlood",
        spawnTime: "60",
        type: "batsBlood"
    }, {
        tid: "1500325161145",
        x: 546,
        y: 365,
        sprite: "dragonsBlood",
        levelId: "",
        pickupType: "dragonsBlood",
        spawnTime: "-1",
        type: "dragonsBlood"
    }, {
        tid: "1500410702762",
        x: 435,
        y: 357,
        sprite: "ravenGall",
        levelId: "",
        pickupType: "ravenGall",
        type: "ravenGall"
    }, {
        tid: "1500410722068",
        x: 820,
        y: 415,
        sprite: "bearPaw",
        levelId: "",
        pickupType: "bearPaw",
        type: "bearPaw"
    } ],
    persons: [ {
        tid: "1505936497739",
        x: 917,
        y: 252,
        sprite: "witch3",
        levelId: "",
        questMessage: "Go away."
    } ],
    patients: [],
    blockers: [],
    bgs: [ {
        tid: "1500242406823",
        x: 566,
        y: 17,
        sprite: "lvl1-oven",
        levelId: ""
    }, {
        tid: "1500242425227",
        x: 701,
        y: 305,
        sprite: "lvl1-tentdoor",
        levelId: ""
    }, {
        tid: "1500324633674",
        x: 374,
        y: 334,
        sprite: "lvl1-tent-shelf",
        levelId: ""
    }, {
        tid: "1500324709846",
        x: 487,
        y: 394,
        sprite: "lvl1-tent-bottles",
        levelId: ""
    }, {
        tid: "1500324755795",
        x: 856,
        y: 391,
        sprite: "lvl1-tent-bottles2",
        levelId: ""
    } ]
}, {
    levelId: "1500634511430",
    groundY: "640",
    noGround: !1,
    groundSprite: "ground1",
    bgSprite: "bg1",
    levelName: "bana4",
    ladders: [ {
        tid: "1500635001952",
        x: 924,
        y: 206,
        sprite: "ladder1",
        levelId: ""
    } ],
    platforms: [ {
        tid: "1500635035566",
        x: 449,
        y: 244,
        sprite: "platform1",
        levelId: ""
    } ],
    portals: [ {
        tid: "1500634665993",
        x: 1360,
        y: 541,
        sprite: "portal",
        levelId: "123",
        leads: "right",
        offset: !0,
        stretch: !0
    }, {
        tid: "1500635608127",
        x: 4,
        y: 538,
        sprite: "portal",
        levelId: "1500635465965",
        leads: "left",
        offset: !0,
        stretch: !0
    } ],
    pickups: [ {
        tid: "1500634958506",
        x: 380,
        y: 562,
        sprite: "dogRose",
        levelId: "",
        pickupType: "dogRose",
        type: "dogRose"
    }, {
        tid: "1500635324558",
        x: 567,
        y: 189,
        sprite: "amethyst",
        levelId: "",
        pickupType: "amethyst",
        spawnTime: "28",
        type: "amethyst"
    }, {
        tid: "1500635368881",
        x: 488,
        y: 177,
        sprite: "heather",
        levelId: "",
        pickupType: "heather",
        type: "heather"
    } ],
    persons: [],
    patients: [ {
        tid: "1500634704579",
        x: 268,
        y: 614,
        sprite: "patient1",
        levelId: "",
        hideTid: "1500634726437",
        enemy: "cold",
        lives: "50",
        reward: "duck",
        rewardQty: "10",
        saveMessage: "Thank you! You saved me from that terrible disease. I give you 10 ducks."
    }, {
        tid: "1500635047727",
        x: 639,
        y: 220,
        sprite: "patient1",
        levelId: "",
        enemy: "flu",
        lives: "50",
        reward: "dogRose",
        saveMessage: "Thank you for saving me! Here is 10 dog roses.",
        rewardQty: "10"
    } ],
    blockers: [ {
        tid: "1500634726437",
        x: 11,
        y: 416,
        sprite: "rock1",
        levelId: ""
    } ],
    bgs: []
}, {
    levelId: "1500635465965",
    groundY: "640",
    noGround: !1,
    groundSprite: "ground1",
    bgSprite: "bg1b",
    levelName: "bana5",
    ladders: [ {
        tid: "1500639053652",
        x: 650,
        y: 275,
        sprite: "ladder1",
        levelId: "",
        direction: "up"
    } ],
    platforms: [],
    portals: [ {
        tid: "1500635581353",
        x: 1362,
        y: 540,
        sprite: "portal",
        levelId: "1500634511430",
        leads: "right",
        offset: !0,
        stretch: !0
    }, {
        tid: "1500635690823",
        x: 405,
        y: 539,
        sprite: "door",
        levelId: "1500635746745",
        leads: "left",
        stretch: !1,
        spawnAtSprite: "1500635886769",
        door: !0
    } ],
    pickups: [],
    persons: [],
    patients: [],
    blockers: [ {
        tid: "1500635545095",
        x: 11,
        y: 415,
        sprite: "rock1",
        levelId: ""
    } ],
    bgs: [ {
        tid: "1500635644103",
        x: 242,
        y: 295,
        sprite: "tent1",
        levelId: ""
    } ]
}, {
    levelId: "1500635746745",
    groundY: "-1000",
    noGround: !0,
    groundSprite: "ground1",
    bgSprite: "bg1-tent",
    levelName: "tent2",
    ladders: [],
    platforms: [ {
        tid: "1500635809146",
        x: 382,
        y: 482,
        sprite: "platform-tent",
        levelId: ""
    } ],
    portals: [ {
        tid: "1500635886769",
        x: 734,
        y: 382,
        sprite: "door",
        levelId: "1500635465965",
        leads: "right",
        door: !0,
        spawnAtSprite: "1500635690823"
    } ],
    pickups: [ {
        tid: "1500638346009",
        x: 420,
        y: 417,
        sprite: "batsBlood",
        levelId: "",
        pickupType: "batsBlood",
        type: "batsBlood"
    }, {
        tid: "1500638363625",
        x: 970,
        y: 463,
        sprite: "snail",
        levelId: "",
        pickupType: "snail",
        type: "snail"
    }, {
        tid: "1500638366359",
        x: 462,
        y: 420,
        sprite: "ravenGall",
        levelId: "",
        pickupType: "ravenGall",
        type: "ravenGall"
    }, {
        tid: "1500638568109",
        x: 518,
        y: 416,
        sprite: "dragonsBlood",
        levelId: "",
        pickupType: "dragonsBlood",
        type: "dragonsBlood"
    }, {
        tid: "1500638570471",
        x: 679,
        y: 415,
        sprite: "dragonsBlood",
        levelId: "",
        pickupType: "dragonsBlood",
        type: "dragonsBlood"
    } ],
    persons: [],
    patients: [],
    blockers: [],
    bgs: [ {
        tid: "1500635839363",
        x: 518,
        y: 72,
        sprite: "lvl1-oven",
        levelId: ""
    }, {
        tid: "1500635871312",
        x: 725,
        y: 351,
        sprite: "lvl1-tentdoor",
        levelId: ""
    } ]
} ];

BasicGame.MainMenu = function(game) {
    this.music = null, this.playButton = null;
}, BasicGame.MainMenu.prototype = {
    create: function(game) {
        var bg;
        audioplayer.playMusic("menu"), medicmenu.init(), game.stage.backgroundColor = "#dddddd", 
        bg = this.add.sprite(this.world.centerX, this.world.centerY, "loadscreen1"), bg.width = Utils.ScreenUtils.screenMetrics.maxGameWidth, 
        bg.height = Utils.ScreenUtils.screenMetrics.maxGameHeight, bg.anchor.setTo(.5, .5), 
        medicmenu.eventHub.$on("startnewgame", function() {
            brew.itemStore.state.items = [], brew.recipeStore.state.recipes = [], progressLog.graves = [], 
            progressLog.destroyedSprites = [], progressLog.revealedSprites = [], pickupLog = [], 
            brew.scoreStore.dispatch("importState", {
                life: 3,
                level: 1,
                xp: 0
            }), brew.itemStore.dispatch("resetStore"), this.state.start("Game"), brew.eventHub.$emit("showTopMenu");
        }.bind(this)), medicmenu.eventHub.$on("continue", function() {
            var saved64 = localStorage.getItem("medic-save");
            saved64 && (savedObj = JSON.parse(atob(saved64)), brew.scoreStore.dispatch("importState", savedObj.score), 
            brew.itemStore.state.items = savedObj.items, brew.recipeStore.state.recipes = savedObj.recipes, 
            progressLog.graves = savedObj.progressLog.graves, progressLog.destroyedSprites = savedObj.progressLog.destroyedSprites, 
            progressLog.revealedSprites = savedObj.progressLog.revealedSprites, pickupLog = savedObj.pickupLog, 
            this.state.start("Game", !0, !1, {
                resuming: !0,
                level: savedObj.currentLevel,
                x: savedObj.playerHitAreaX,
                y: savedObj.playerHitAreaY
            }), console.log("continue"), brew.eventHub.$emit("showTopMenu"));
        }.bind(this));
    },
    update: function() {},
    startGame: function(pointer) {
        this.state.start("Game"), brew.eventHub.$emit("showTopMenu");
    }
}, BasicGame.Preloader = function(game) {
    this.background = null, this.preloadBar = null, this.ready = !1;
}, BasicGame.Preloader.prototype = {
    preload: function() {
        localStorage.getItem("medic-levels") ? (console.warn("Preloading from local storage"), 
        levels = JSON.parse(localStorage.getItem("medic-levels"))) : console.warn("Preloading from file");
        var bg = this.add.sprite(this.world.centerX, this.world.centerY, "loadscreen1");
        bg.width = Utils.ScreenUtils.screenMetrics.maxGameWidth, bg.height = Utils.ScreenUtils.screenMetrics.maxGameHeight, 
        bg.anchor.setTo(.5, .5), this.preloadBar = this.add.sprite(this.world.centerX - 175, 630, "preloaderBar"), 
        this.load.setPreloadSprite(this.preloadBar);
        for (var spritesToLoad = [], types = [ "ladders", "patients", "persons", "pickups", "platforms", "portals", "blockers", "slopes", "bgs", "savepoints" ], i = 0; i < levels.length; i++) {
            spritesToLoad.indexOf(levels[i].bgSprite) === -1 && levels[i].bgSprite && spritesToLoad.push(levels[i].bgSprite), 
            spritesToLoad.indexOf(levels[i].groundSprite) === -1 && levels[i].groundSprite && spritesToLoad.push(levels[i].groundSprite);
            for (var t = 0; t < types.length; t++) {
                var type = types[t];
                if (levels[i][type] && levels[i][type].length) for (var s = 0; s < levels[i][type].length; s++) {
                    var sprite = levels[i][type][s];
                    spritesToLoad.indexOf(sprite.sprite) === -1 && sprite.sprite && spritesToLoad.push(sprite.sprite);
                }
            }
        }
        for (var i = 0; i < spritesToLoad.length; i++) this.load.image(spritesToLoad[i], "assets/images/" + spritesToLoad[i] + ".png");
        this.load.spritesheet("player", "assets/images/player-sheet.png", 64, 104), this.load.image("grave", "assets/images/grave.png"), 
        this.load.image("healinghand", "assets/images/healinghand.png"), this.load.image("enemy1", "assets/images/enemy1.png"), 
        this.load.image("playerHitArea", "assets/images/player-hitarea.png"), this.load.atlas("startButton", "assets/images/btn-start.png", "assets/images/btn-start.json"), 
        audioplayer.preload(this);
    },
    create: function() {
        this.preloadBar.cropEnabled = !1, audioplayer.init(this);
    },
    update: function() {
        this.cache.isSoundDecoded("track1") && 0 == this.ready && (this.ready = !0, this.state.start("MainMenu"));
    }
};

var skilltree = {
    skills: {
        itemHandling: {
            animalia: 1,
            plantae: 1,
            mineral: 1,
            fungi: 1
        },
        enemyHandling: {
            wounds: 1,
            diseases: 1
        },
        general: {
            brewing: 1,
            xpfactor: 1
        }
    },
    doctor: {
        upgrades: [ {
            name: "Brew novice",
            skillItem: null,
            skillCategory: null,
            upgradeBy: 1,
            skillType: "general.brewing",
            cost: 10
        }, {
            name: "ER",
            skillItem: null,
            skillCategory: "wounds",
            upgradeBy: .5,
            skillType: "enemyCategoryHandling.wounds",
            cost: 10
        } ]
    },
    therapist: {
        upgrades: [ {
            name: ""
        } ]
    },
    healer: {
        upgrades: [ {
            name: "Healing hand",
            skillItem: "healinghand",
            upgradeBy: null,
            skillType: "unlock",
            cost: 5
        }, {
            name: "Healing hand",
            skillItem: "healinghand",
            upgradeBy: 30,
            skillType: "upgrade",
            cost: 5
        }, {
            name: "Life",
            skillItem: "life",
            upgradeBy: 1,
            skillType: "upgrade",
            cost: 10
        } ]
    }
}, Utils = Utils || {};

Utils = {
    ScreenUtils: {
        screenMetrics: {
            windowWidth: 0,
            windowHeight: 0,
            defaultGameWidth: 0,
            defaultGameHeight: 0,
            maxGameWidth: 0,
            maxGameHeight: 0,
            gameWidth: 0,
            gameHeight: 0,
            scaleX: 1,
            scaleY: 1,
            offsetX: 0,
            offsetY: 0
        },
        calculateScreenMetrics: function(aDefaultWidth, aDefaultHeight, aOrientation) {
            var tmp, aMaxGameWidth = 0, aMaxGameHeight = 0, windowWidth = window.innerWidth, windowHeight = window.innerHeight;
            (windowWidth < windowHeight && "landscape" === aOrientation || windowHeight < windowWidth && "portrait" === aOrientation) && (tmp = windowWidth, 
            windowWidth = windowHeight, windowHeight = tmp), "landscape" === aOrientation ? (aMaxGameWidth = Math.round(1420 * aDefaultWidth / 1280), 
            aMaxGameHeight = Math.round(960 * aDefaultHeight / 800)) : (aMaxGameWidth = Math.round(960 * aDefaultWidth / 800), 
            aMaxGameHeight = Math.round(1420 * aDefaultHeight / 1280));
            var defaultAspect = 1.6, windowAspect = windowWidth / windowHeight, offsetX = 0, offsetY = 0, gameWidth = 0, gameHeight = 0;
            windowAspect > defaultAspect ? (gameHeight = aDefaultHeight, gameWidth = 2 * Math.ceil(gameHeight * windowAspect / 2), 
            gameWidth = Math.min(gameWidth, aMaxGameWidth), offsetX = (gameWidth - aDefaultWidth) / 2, 
            offsetY = 0) : (gameWidth = aDefaultWidth, gameHeight = 2 * Math.ceil(gameWidth / windowAspect / 2), 
            gameHeight = Math.min(gameHeight, aMaxGameHeight), offsetX = 0, offsetY = (gameHeight - aDefaultHeight) / 2);
            var scaleX = windowWidth / gameWidth, scaleY = windowHeight / gameHeight;
            return this.screenMetrics = {}, this.screenMetrics.windowWidth = windowWidth, this.screenMetrics.windowHeight = windowHeight, 
            this.screenMetrics.defaultGameWidth = aDefaultWidth, this.screenMetrics.defaultGameHeight = aDefaultHeight, 
            this.screenMetrics.maxGameWidth = aMaxGameWidth, this.screenMetrics.maxGameHeight = aMaxGameHeight, 
            this.screenMetrics.gameWidth = gameWidth, this.screenMetrics.gameHeight = gameHeight, 
            this.screenMetrics.scaleX = scaleX, this.screenMetrics.scaleY = scaleY, this.screenMetrics.offsetX = offsetX, 
            this.screenMetrics.offsetY = offsetY, this.screenMetrics;
        }
    },
    onResize: function() {},
    onLoad: function() {
        window.addEventListener("resize", Utils.onResize), this.onResize();
    }
}, window.addEventListener("load", Utils.onLoad.bind(Utils));