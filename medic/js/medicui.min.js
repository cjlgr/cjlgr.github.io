/*! medic 2017-10-21 */
var brew = {
    calculateXp: function(xp) {
        var level = this.scoreStore.getters.score.level, realXp = Math.round(level * (xp / 4));
        return realXp;
    },
    getNextXpGoal: function() {
        var level = this.scoreStore.getters.score.level;
        return level * (level / 2 * 150);
    },
    init: function() {
        this.initComponents(), this.scoreStore = new Vuex.Store({
            state: {
                score: {
                    level: 1,
                    xp: 0,
                    life: 3
                }
            },
            getters: {
                score: function(state) {
                    return state.score;
                }
            },
            mutations: {
                incrementXp: function(state, options) {
                    var incr = brew.calculateXp(options.xp);
                    for (state.score.xp += incr, options.showNotification && brew.eventHub.$emit("showNotification", {
                        msg: null,
                        header: "You gained XP",
                        qty: null,
                        xp: options.xp
                    }); state.score.xp >= brew.getNextXpGoal(); ) state.score.xp += state.score.xp - brew.getNextXpGoal(), 
                    brew.scoreStore.dispatch("incrementLevel", {
                        level: 1
                    });
                },
                incrementLevel: function(state, options) {
                    state.score.level += options.level, brew.eventHub.$emit("showNotification", {
                        header: "<strong>Level up!</strong>",
                        msg: "<i>Your are now level</i> " + state.score.level,
                        qty: null,
                        xp: null
                    });
                },
                decreaseLife: function(state, options) {
                    state.score.life -= options.lives || 1;
                },
                increaseLife: function(state, options) {
                    state.score.life += options.lives || 1;
                },
                importState: function(state, options) {
                    state.score.life = options.life, state.score.xp = options.xp, state.score.level = options.level;
                }
            },
            actions: {
                incrementXp: function(context, options) {
                    context.commit("incrementXp", options);
                },
                incrementLevel: function(context, options) {
                    context.commit("incrementLevel", options);
                },
                decreaseLife: function(context, options) {
                    context.commit("decreaseLife", options);
                },
                increaseLife: function(context, options) {
                    context.commit("increaseLife", options);
                },
                importState: function(context, options) {
                    context.commit("importState", options);
                }
            }
        }), this.recipeStore = new Vuex.Store({
            state: {
                recipes: []
            },
            getters: {
                allRecipes: function(state) {
                    return state.recipes;
                }
            },
            mutations: {
                addRecipe: function(state, recipe) {
                    state.recipes.push(recipe);
                }
            },
            actions: {
                addRecipe: function(context, options) {
                    context.commit("addRecipe", options.recipe);
                }
            }
        }), this.itemStore = new Vuex.Store({
            state: {
                items: []
            },
            getters: {
                allItems: function(state) {
                    return state.items;
                }
            },
            mutations: {
                resetStore: function(state, options) {
                    var items = [];
                    for (var key in itemlib) if (itemlib.hasOwnProperty(key)) {
                        var obj = itemlib[key], objToAdd = {};
                        for (var prop in obj) obj.hasOwnProperty(prop) && (objToAdd[prop] = obj[prop]);
                        items.push(objToAdd);
                    }
                    var cheatPotion1 = JSON.parse('{"name":"Elixir of Tatul","id":"elixiroftatul","category":"brews","type":"brew","qty":4,"sprite":"brew6","spawntime":null,"fortifies":[],"props":[{"prop":"cold","strength":112.5,"name":"Cold"},{"prop":"darkness","strength":30,"name":"Darkness"},{"prop":"cough","strength":30,"name":"Cough"}]}'), cheatPotion2 = JSON.parse('{"name":"Mixture of Penbe","id":"mixtureofpenbe","category":"brews","type":"brew","qty":4,"sprite":"brew9","spawntime":null,"fortifies":[],"props":[{"prop":"wound","strength":100,"name":"Wounds"},{"prop":"flu","strength":75,"name":"Flu"},{"prop":"cold","strength":60,"name":"Cold"}]}'), cheatPotion3 = JSON.parse('{"name":"Balsam of Lom","id":"balsamoflom","category":"brews","type":"brew","qty":1,"sprite":"brew6","spawntime":null,"fortifies":[],"props":[{"prop":"wound","strength":300,"name":"Wounds"},{"prop":"flu","strength":-240,"name":"Flu"},{"prop":"cough","strength":100,"name":"Cough"}]}'), healinghand = JSON.parse('{"name":"Healing hand","id":"healinghand","category":"actions","type":"action","qty":-1,"sprite":"healinghand","spawntime":null,"fortifies":[],"props":[{"prop":"heal","strength":20,"name":"Heal"},{"prop":"all","strength":20,"name":"All diseases"}]}'), abandon = JSON.parse('{"name":"Abandon","id":"abandon","category":"actions","type":"action","qty":-1,"sprite":"healinghand","spawntime":null,"fortifies":[],"props":[{"prop":"abandon","strength":"30%","name":"Abandon"}]}'), nothing = JSON.parse('{"name":"No action","id":"nothing","category":"actions","type":"action","qty":-1,"sprite":"healinghand","spawntime":null,"fortifies":[],"props":[{"prop":"nothing","strength":"0%","name":"Does nothing"}]}');
                    items.push(cheatPotion1), items.push(cheatPotion2), items.push(cheatPotion3), items.push(healinghand), 
                    items.push(abandon), items.push(nothing), state.items = items;
                },
                addItem: function(state, options) {
                    var item = options.item, xp = options.xp, category = brew.itemStore.getters.allItems.find(function(foundItem) {
                        return item.id === foundItem.id;
                    });
                    xp && brew.eventHub.$emit("incrementXp", {
                        xp: xp,
                        showNotification: !1
                    }), category.qty += item.qty, brew.eventHub.$emit("showNotification", {
                        msg: category.name,
                        header: "You picked up:",
                        qty: item.qty,
                        xp: brew.calculateXp(xp)
                    });
                },
                addBrewedItem: function(state, options) {
                    var item = options.item, xp = options.xp, category = brew.itemStore.getters.allItems.find(function(foundItem) {
                        return item.id === foundItem.id;
                    });
                    xp && brew.eventHub.$emit("incrementXp", {
                        xp: xp,
                        showNotification: !1
                    }), category.qty += item.qty, brew.eventHub.$emit("showNotification", {
                        msg: category.name,
                        header: "You brewed:",
                        qty: item.qty,
                        xp: brew.calculateXp(xp)
                    });
                },
                addNewBrewedItem: function(state, options) {
                    var item = options.item, xp = options.xp;
                    xp && brew.eventHub.$emit("incrementXp", {
                        xp: xp,
                        showNotification: !1
                    }), brew.eventHub.$emit("showNotification", {
                        msg: item.name,
                        header: "You made a new brew!",
                        qty: item.qty,
                        xp: brew.calculateXp(xp)
                    }), state.items.push(item);
                },
                deleteItem: function(state, itemId) {
                    for (var i = 0; i < state.items.length; i++) if (state.items[i].id === itemId) {
                        state.items[i].qty -= 1;
                        break;
                    }
                }
            },
            actions: {
                resetStore: function(context, payload) {
                    context.commit("resetStore");
                },
                deleteItem: function(context, payload) {
                    context.commit("deleteItem", payload.itemId);
                },
                addNewBrewedItem: function(context, payload) {
                    context.commit("addNewBrewedItem", {
                        item: payload.item,
                        xp: payload.xp || 100
                    });
                },
                addItem: function(context, payload) {
                    var newItem = {
                        id: payload.id,
                        qty: payload.qty
                    }, xp = payload.xp || 50;
                    context.commit("addItem", {
                        item: newItem,
                        xp: xp
                    });
                },
                addBrewedItem: function(context, payload) {
                    var newItem = {
                        id: payload.id,
                        qty: payload.qty
                    }, xp = payload.xp || 50;
                    context.commit("addBrewedItem", {
                        item: newItem,
                        xp: xp
                    });
                }
            }
        }), this.eventHub = new Vue(), this.eventHub.$on("addItem", function(options) {
            if (options.id) {
                brew.itemStore.dispatch("addItem", {
                    id: options.id,
                    qty: options.qty
                });
            }
        }), this.eventHub.$on("increaseLife", function(lives) {
            brew.scoreStore.dispatch("increaseLife", {
                lives: lives
            });
        }), this.eventHub.$on("decreaseLife", function(lives) {
            brew.scoreStore.dispatch("decreaseLife", {
                lives: lives
            });
        }), this.eventHub.$emit("test", {
            option: 1
        }), new Vue({
            el: "#brew",
            created: function() {
                brew.eventHub.$on("hideWindow", function(btn) {
                    this.show = 0, "function" == typeof this.closeCallback && this.closeCallback.call(this.scope || this, btn);
                }.bind(this)), brew.eventHub.$on("showNotification", function(options) {
                    var nId = new Date().getTime();
                    this.notifications.unshift({
                        msg: options.msg,
                        header: options.header,
                        qty: options.qty,
                        id: nId,
                        fading: !1,
                        xp: options.xp
                    }), setTimeout(function(nId) {
                        for (var i = 0; i < this.notifications.length; i++) this.notifications[i].id === nId && (this.notifications[i].fading = !0);
                    }.bind(this, nId), 3e3), setTimeout(function(nId) {
                        for (var i = 0; i < this.notifications.length; i++) this.notifications[i].id === nId && this.notifications.splice(i, 1);
                    }.bind(this, nId), 5e3);
                }.bind(this)), brew.eventHub.$on("displayMessage", function(options) {
                    this.show = 3, this.msgBody = options.msg, this.msgHeader = options.msgHeader || "", 
                    this.reward = options.reward || "", this.rewardQty = options.rewardQty || 0, this.revealTid = options.revealTid || null, 
                    this.hideTid = options.hideTid || null, this.closeCallback = options.closeCallback || null, 
                    this.scope = options.scope, this.msgButtons = options.buttons || [];
                }.bind(this)), brew.eventHub.$on("incrementXp", function(opts) {
                    this.incrementXp(opts);
                }.bind(this)), brew.eventHub.$on("showTopMenu", function(opts) {
                    this.showTopMenu = !0;
                }.bind(this)), brew.eventHub.$on("hideTopMenu", function(opts) {
                    this.showTopMenu = !1;
                }.bind(this)), brew.eventHub.$on("startBattle", function(options) {
                    enemylib[options.enemy];
                    this.show = 2, this.patientTid = options.tid, this.patientSprite = options.sprite, 
                    this.patientLives = options.lives, this.enemy = options.enemy, this.reward = options.reward || "", 
                    this.rewardQty = options.rewardQty || 0, this.revealTid = options.revealTid || null, 
                    this.hideTid = options.hideTid || null, this.saveMessage = options.saveMessage || "";
                }.bind(this));
            },
            data: {
                score: brew.scoreStore.getters.score,
                show: 0,
                msgBody: "",
                msgHeader: "",
                msgItem: "",
                scope: null,
                msgButtons: [],
                patientTid: "",
                patientSprite: "",
                enemySprite: "",
                patientLives: 0,
                enemy: "",
                reward: "",
                rewardQty: "",
                revealTid: "",
                hideTid: "",
                saveMessage: "",
                notifications: [],
                showTopMenu: !1
            },
            computed: {
                xpnext: function() {
                    return brew.getNextXpGoal();
                },
                level: function() {
                    return this.score.level;
                },
                xp: function() {
                    return this.score.xp;
                },
                life: function() {
                    return this.score.life;
                },
                getVisible: function() {
                    return this.showTopMenu ? "visible" : "hidden";
                }
            },
            template: '<div><div v-bind:style="{visibility: getVisible}" class="topmenu"><a class="btn btn-large btn-grey1" href="#" v-on:click.stop.prevent="showSettings">Menu</a><span class="xp-display"><span class="xp-score-label">XP:</span><span class="xp-score">{{xp}}</span><span class="xp-score-label">/{{xpnext}}</span> <span class="level-score-label">Level:</span><span class="level-score">{{level}}</span> <span class="lives-label">Lives:</span><span class="lives">{{life}}</span></span><a class="btn btn-large btn-secondary" href="#" v-on:click.stop.prevent="showBrew">Brew</a></div><div class="notifications"><notification v-for="n in notifications" v-bind:nfading="n.fading" v-bind:nmsg="n.msg" v-bind:nqty="n.qty" v-bind:nheader="n.header" v-bind:nxp="n.xp"></notification></div><template v-if="show===1"><itemlist></itemlist></template><template v-if="show===2"><battle v-bind:patientTid="patientTid" v-bind:reward="reward" v-bind:rewardQty="rewardQty" v-bind:hideTid="hideTid" v-bind:revealTid="revealTid" v-bind:saveMessage="saveMessage" v-bind:patientOriginalLives="patientLives" v-bind:patientSprite="patientSprite" v-bind:enemy="enemy"></battle></template><template v-if="show===3"><message v-bind:reward="reward" v-bind:rewardQty="rewardQty" v-bind:hideTid="hideTid" v-bind:revealTid="revealTid" v-bind:msgHeader="msgHeader" v-bind:msgButtons="msgButtons" v-bind:msg="msgBody"></message></template></div>',
            methods: {
                showSettings: function() {
                    medicmenu.eventHub.$emit("showSettingsMenu");
                },
                showBrew: function() {
                    this.show = 1;
                },
                incrementXp: function(opts) {
                    brew.scoreStore.dispatch("incrementXp", opts);
                }
            }
        });
    },
    initComponents: function() {
        Vue.component("notification", {
            data: function() {
                return {};
            },
            props: [ "nmsg", "nheader", "nqty", "nfading", "nxp" ],
            computed: {
                quantity: function() {
                    return this.nqty ? "×" + this.nqty : "";
                },
                fadeCls: function() {
                    return this.nfading ? "fading" : "";
                }
            },
            template: '<div class="notification" v-bind:class="fadeCls"><h1 class="special-message-format" v-html="nheader"></h1><template v-if="nmsg"><p class="special-message-format"><span v-html="nmsg"></span> <span class="qty">{{quantity}}</span></p></template><template v-if="nxp"><p class="notification-xp-message">XP: <span class="notification-xp-amount">{{nxp}}</span></p></template></div>'
        }), Vue.component("message", {
            data: function() {
                return {};
            },
            props: [ "msg", "msgHeader", "reward", "rewardQty", "revealTid", "hideTid", "msgButtons" ],
            template: '<div class="backdrop"><div class="window message-window"><div class="window-inner"><h1>{{msgHeader}}</h1><p class="special-message-format" v-html="msg"></p><div><template v-for="button in msgButtons"><a href="#" v-bind:class="getButtonClass(button)" class="btn btn-large mr-xs" v-on:click="dismiss(button)">{{button}}</a></template><template v-if="msgButtons.length < 1"><a href="#" class="btn btn-large btn-grey2" v-on:click="dismiss(\'ok\')">Ok</a></template></div></div></div></div>',
            methods: {
                getButtonClass: function(button) {
                    var ret = "btn-grey2";
                    return "NO" === button.toUpperCase() && (ret = "btn-red"), "YES" !== button.toUpperCase() && "START" !== button.toUpperCase() && "SAVE" !== button.toUpperCase() || (ret = "btn-secondary"), 
                    ret;
                },
                dismiss: function(button) {
                    this.reward && this.rewardQty && brew.eventHub.$emit("addItem", {
                        id: this.reward,
                        qty: parseInt(this.rewardQty, 10)
                    }), this.revealTid && brew.eventHub.$emit("revealSprite", this.revealTid), this.hideTid && brew.eventHub.$emit("hideSprite", this.hideTid), 
                    brew.eventHub.$emit("hideWindow", button);
                }
            }
        }), Vue.component("lifemeter", {
            data: function() {
                return {};
            },
            computed: {
                livesPercent: function() {
                    return this.lives <= 0 ? 0 : this.lives / this.originalLives * 100;
                }
            },
            props: [ "lives", "originalLives", "color" ],
            template: '<div class="lifemeter" style="width: 100%;"><div class="lifemeter-outer"><div class="lifemeter-inner" v-bind:style="{width: livesPercent + \'%\', backgroundColor: color}"></div></div><div class="text-grey6 lifemeter-value">{{lives}}</div></div>'
        }), Vue.component("battle", {
            data: function() {
                return {
                    items: brew.itemStore.getters.allItems,
                    enemyName: "",
                    enemyDamage: 0,
                    enemyDamageVariation: 0,
                    enemyLives: 0,
                    enemyLivesVariation: 0,
                    enemyOriginalLives: 0,
                    enemySprite: "",
                    patientLives: 0,
                    patientMeterColor: "#00fff7",
                    enemyMeterColor: "#ff2f00",
                    playersTurn: !0,
                    showBrewSelectWindow: !1,
                    selectedBrew: "",
                    armedBrew: "",
                    enemyAliveCls: "enemy-alive",
                    patientAliveCls: "patient-alive",
                    attackMessagePatientCls: "",
                    healMessagePatientCls: "",
                    attackMessageEnemyCls: "",
                    attackMessagePatient: "",
                    healMessagePatient: "",
                    attackMessageEnemy: ""
                };
            },
            computed: {
                patientLivesPercent: function() {
                    return this.patientLives <= 0 ? 0 : this.patientLives / this.patientOriginalLives * 100;
                },
                attackOk: function() {
                    var armedQty = 0;
                    this.getArmedBrew() && (armedQty = this.getArmedBrew().qty);
                    var ok = this.patientLives > 0 && this.enemyLives > 0 && this.playersTurn && this.armedBrew && (armedQty > 0 || armedQty === -1);
                    return ok;
                }
            },
            props: [ "patientTid", "patientSprite", "patientOriginalLives", "enemy", "reward", "rewardQty", "saveMessage", "revealTid", "hideTid" ],
            template: '<div class="window fullscreen battle-window"><div class="window-inner"><h3 class="text-grey6 special-message-format">Help the patient suffering from <b>{{enemyName}}</b>!</h3> <br><div class="row battle-contestant-row"><div class="col col-6 battle-contestant-col battle-contestant-patient-col"><lifemeter v-bind:color=patientMeterColor v-bind:lives=patientLives v-bind:originalLives=patientOriginalLives></lifemeter><div v-bind:class="patientAliveCls" class="battle-contestant-img-wrapper center"><img class="battle-contestant-img" v-bind:src=getSpriteUrl(patientSprite)><div v-bind:class="attackMessagePatientCls" class="attack-message">{{attackMessagePatient}}</div><div v-bind:class="healMessagePatientCls" class="attack-message heal-message">{{healMessagePatient}}</div><div class="battle-contestant-final-message text-red"><p>Patient died!</p></div></div></div><div class="col col-6 battle-contestant-col battle-contestant-enemy-col"><lifemeter v-bind:color=enemyMeterColor v-bind:lives=enemyLives v-bind:originalLives=enemyOriginalLives></lifemeter><div v-bind:class="enemyAliveCls" class="battle-contestant-img-wrapper center"><img class="battle-contestant-img anim-slowfloat" v-bind:src=getSpriteUrl(enemySprite)><div v-bind:class="attackMessageEnemyCls" class="attack-message">{{attackMessageEnemy}}</div><div class="battle-contestant-final-message text-green"><p>Victory!</p></div></div></div></div><table class="row"><tr><td><a href="#" class="btn btn-large btn-grey2 btn-battle-action" :disabled="!attackOk" v-on:click.stop.prevent="showBrewSelectWindow=true">Select</a></td><td style="width: 100%;" class="ccol ccol-8 armed-brew-details"><template v-if="getArmedBrew().id"><table class="row"><tr><td><img v-bind:src=getSpriteUrl(getArmedBrew().sprite)></td><td><div class=""><h1 class="text-primary">{{getArmedBrew().name}}<template v-if="getArmedBrew().qty!==-1"><span class="text-secondary"> ({{getArmedBrew().qty}})</span></template></h1><ul class="armed-brew-props text-grey6"><li v-bind:class="getItemPropColorClass(prop)" v-for="prop in getArmedBrewProps()"><img class="item-prop-icon" v-bind:src="getItemPropIconSrc(prop)" width=16 height=16 />{{prop.name}}: {{prop.strength}}</li></ul></div></td></tr></table></template><template v-else><span class="no-selection">No action selected</span></template></td><td class="ccol ccol-2"><a href="#" v-bind:class="{ disabled: !attackOk }" class="btn btn-large btn-secondary btn-battle-action" :disabled="!attackOk" v-on:click.stop.prevent="doAttack()">Use!</a></td></tr></table><br><br><div v-bind:class="{ hidden: !showBrewSelectWindow }" class="brew-select-window"><div class="brew-select-window-inner"><div class="row"><div class="col col-6 brew-select-list-col"><h1>Potions</h1><ul class="brew-select-list"><li v-bind:class="getBrewActiveClass(item)" v-on:click="selectBrew(item)" v-for="item in getOwnedBrews()" class="row">{{item.name}} <span class="text-secondary">({{item.qty}})</span></li></ul><h1>Actions</h1><ul class="brew-select-list"><li v-bind:class="getBrewActiveClass(item)" v-on:click="selectBrew(item)" v-for="item in getOwnedActions()" class="row">{{item.name}} <template v-if="item.qty!==-1"><span class="text-secondary">({{item.qty}})</span></template></li></ul></div><div class="col col-6 brew-select-details-col"><template v-if="selectedBrew"><div class="brew-select-details"><img class="selected-brew-img" v-bind:src=getSpriteUrl(getActiveBrew().sprite)><h4 class="text-primary">{{getActiveBrew().name}}</h4><ul class="item-props-list"><li v-bind:class="getItemPropColorClass(prop)" v-for="prop in getActiveBrewProps()"><img class="item-prop-icon" v-bind:src="getItemPropIconSrc(prop)" width=16 height=16 />{{prop.name}}: {{prop.strength}}</li></ul></div><a href="#" class="btn btn-large btn-primary" v-on:click.stop.prevent="armBrew(selectedBrew)">Select</a></template><template v-else><span class="no-brew-details-selected">Choose an item in the list</span></template></div></div></div></div></div></div>',
            created: function() {
                var enemy = enemylib[this.enemy];
                this.enemyName = enemy.name, this.enemyType = enemy.type, this.enemyDamage = enemy.damage, 
                this.enemyDamageVariation = enemy.damageVariation, this.enemyLives = enemy.lives, 
                this.enemyOriginalLives = enemy.lives, this.enemyLivesVariation = enemy.livesVariation, 
                this.enemySprite = enemy.enemySprite, this.patientLives = this.patientOriginalLives;
            },
            methods: {
                getItemPropColorClass: function(prop) {
                    return prop.strength < 0 ? "item-prop-poison" : "item-prop-cure";
                },
                getItemPropIconSrc: function(prop) {
                    return prop.strength < 0 ? "assets/images/icon-skull.png" : "assets/images/icon-heart.png";
                },
                getActiveBrew: function() {
                    for (var brew, ownedBrews = this.getOwnedItems(), i = 0; i < ownedBrews.length; i++) if (ownedBrews[i].id === this.selectedBrew) {
                        brew = ownedBrews[i];
                        break;
                    }
                    return brew ? brew : {};
                },
                getActiveBrewProps: function() {
                    for (var brew, ownedBrews = this.getOwnedItems(), i = 0; i < ownedBrews.length; i++) if (ownedBrews[i].id === this.selectedBrew) {
                        brew = ownedBrews[i];
                        break;
                    }
                    return brew ? brew.props : [];
                },
                getArmedBrewProps: function() {
                    for (var brew, ownedBrews = this.getOwnedItems(), i = 0; i < ownedBrews.length; i++) if (ownedBrews[i].id === this.armedBrew) {
                        brew = ownedBrews[i];
                        break;
                    }
                    return brew ? brew.props : [];
                },
                getArmedBrew: function() {
                    for (var brew, ownedBrews = this.getOwnedItems(), i = 0; i < ownedBrews.length; i++) if (ownedBrews[i].id === this.armedBrew) {
                        brew = ownedBrews[i];
                        break;
                    }
                    return brew ? brew : {};
                },
                getBrewActiveClass: function(brew) {
                    return brew.id === this.selectedBrew ? "active" : "";
                },
                hideWindow: function() {
                    brew.eventHub.$emit("hideWindow");
                },
                getSpriteUrl: function(sprite) {
                    return "assets/images/" + sprite + ".png";
                },
                selectBrew: function(brew) {
                    this.selectedBrew = brew.id;
                },
                armBrew: function(brewid) {
                    this.armedBrew = brewid, this.showBrewSelectWindow = !1;
                },
                doAttack: function() {
                    var item, damageStrength = 0, ownedItems = this.getOwnedItems(), doHeal = !1, healStrength = 0, doAbandon = !1, abandonStrength = 0;
                    if (!(ownedItems.length <= 0) && this.attackOk) {
                        for (var i = 0; i < ownedItems.length; i++) if (item = ownedItems[i], item.id === this.armedBrew) {
                            for (var j = 0; j < item.props.length; j++) "heal" === item.props[j].prop && (doHeal = !0, 
                            healStrength += item.props[j].strength), "abandon" === item.props[j].prop && (doAbandon = !0, 
                            abandonStrength += item.props[j].strength), item.props[j].prop === this.enemy ? damageStrength += item.props[j].strength : "all" === item.props[j].prop ? damageStrength += item.props[j].strength : item.props[j].prop === this.enemyType && (damageStrength += item.props[j].strength);
                            break;
                        }
                        if (doAbandon && brew.eventHub.$emit("displayMessage", {
                            msgHeader: "Patient abandoned",
                            msg: "You abandoned the patient"
                        }), doHeal) {
                            var healCapacity = this.patientOriginalLives - this.patientLives;
                            healCapacity > 0 && (console.log("heal", Math.min(healCapacity, healStrength)), 
                            this.patientLives += Math.min(healCapacity, healStrength)), this.healMessagePatientCls = "visible", 
                            this.healMessagePatient = healStrength, setTimeout(function() {
                                this.healMessagePatientCls = "";
                            }.bind(this), 1e3);
                        }
                        this.enemyLives - damageStrength <= 0 ? (this.enemyLives = 0, console.log("Enemy died"), 
                        this.enemyAliveCls = "enemy-dying", setTimeout(function() {
                            this.enemyAliveCls = "enemy-dead", brew.eventHub.$emit("hideSprite", this.patientTid), 
                            brew.eventHub.$emit("displayMessage", {
                                msgHeader: "Patient says:",
                                msg: this.saveMessage,
                                reward: this.reward,
                                rewardQty: this.rewardQty,
                                hideTid: this.hideTid,
                                revealTid: this.revealTid
                            });
                        }.bind(this), 2e3)) : this.enemyLives -= damageStrength, this.attackMessageEnemyCls = "visible", 
                        this.attackMessageEnemy = damageStrength, setTimeout(function() {
                            this.attackMessageEnemyCls = "";
                        }.bind(this), 1e3), item.qty !== -1 && (item.qty -= 1), this.playersTurn = !1, this.enemyLives > 0 && setTimeout(function() {
                            console.log("Enemy strikes");
                            var damage = this.getRandom(this.enemyDamage - this.enemyDamageVariation, this.enemyDamage + this.enemyDamageVariation);
                            this.patientLives - damage <= 0 ? (this.patientLives = 0, console.log("Patient died"), 
                            this.patientAliveCls = "patient-dying", setTimeout(function() {
                                (this.reward || this.revealTid || this.hideTid) && brew.eventHub.$emit("showGrave", this.patientTid), 
                                brew.eventHub.$emit("hideSprite", this.patientTid), brew.eventHub.$emit("displayMessage", {
                                    msgHeader: "Patient died!",
                                    msg: null
                                }), this.patientAliveCls = "patient-dead";
                            }.bind(this), 2e3)) : this.patientLives -= damage, this.attackMessagePatientCls = "visible", 
                            this.attackMessagePatient = damage, setTimeout(function() {
                                this.attackMessagePatientCls = "";
                            }.bind(this), 1e3), console.log(this), this.playersTurn = !0;
                        }.bind(this), 2e3);
                    }
                },
                getOwnedItems: function() {
                    return this.items.filter(function(item) {
                        return item.qty > 0 || item.qty === -1;
                    }.bind(this));
                },
                getOwnedBrews: function() {
                    return this.getOwnedItems().filter(function(item) {
                        return "brew" === item.type;
                    }.bind(this));
                },
                getOwnedActions: function() {
                    return this.getOwnedItems().filter(function(item) {
                        return "action" === item.type;
                    }.bind(this));
                },
                getRandom: function(min, max) {
                    return Math.floor(Math.random() * (max - min + 1)) + min;
                }
            }
        }), Vue.component("itemlist", {
            data: function() {
                return {
                    items: brew.itemStore.getters.allItems,
                    recipes: brew.recipeStore.getters.allRecipes,
                    checkedItems: [],
                    checkedRecipes: [],
                    seed: 10,
                    showCard: 1,
                    itemFilter: 0,
                    showBrewingCard: 1,
                    newBrewProps: [],
                    newBrewName: "",
                    newBrewUrl: "",
                    showSaveRecipe: !1,
                    saveRecipe: !0
                };
            },
            template: '<div class="window fullscreen brew-window"><div class="window-inner"><div class="row"><div class="col col-5 sidebar"><div class="text-center tabbar tabbar-grey1"><a v-bind:class="getItemTabCls()" class="btn btn-large btn-grey1" href="#" v-on:click.stop.prevent="showItemsClick">Items</a><a v-bind:class="getRecipeTabCls()" class="btn btn-large btn-grey1" href="#" v-on:click.stop.prevent="showRecipesClick">Recipes</a></div><div class="text-center tabbar ml-xxs" v-if="showCard===1"><a v-bind:class="getFilterTabCls(0)" class="btn btn-small btn-grey1 mb-xxs mr-xxs" href="#" v-on:click.stop.prevent="setItemFilter(0)">All</a><a v-bind:class="getFilterTabCls(1)" class="btn btn-small btn-grey1 mb-xxs mr-xxs" href="#" v-on:click.stop.prevent="setItemFilter(1)">Animalia</a><a v-bind:class="getFilterTabCls(2)" class="btn btn-small btn-grey1 mb-xxs mr-xxs" href="#" v-on:click.stop.prevent="setItemFilter(2)">Plantae</a><a v-bind:class="getFilterTabCls(3)" class="btn btn-small btn-grey1 mb-xxs mr-xxs" href="#" v-on:click.stop.prevent="setItemFilter(3)">Fungi</a><a v-bind:class="getFilterTabCls(4)" class="btn btn-small btn-grey1 mb-xxs mr-xxs" href="#" v-on:click.stop.prevent="setItemFilter(4)">Mineral</a><a v-bind:class="getFilterTabCls(5)" class="btn btn-small btn-grey1 mb-xxs mr-xxs" href="#" v-on:click.stop.prevent="setItemFilter(5)">Brews</a></div><div class="item-list-wrapper" v-if="showCard===1"><ul class="item-list"><li v-for="item in getFilteredOwnedItems()" class="row" v-bind:class="getCheckedItemActiveCls(item)" v-on:click="onItemListRowClick(item)"><div class="col col-3"><input v-bind:id="item.id" type="checkbox" v-bind:value="item.id" v-model="checkedItems"><label v-bind:for=item.id><img class="item-list-img" v-bind:src=getSpriteUrl(item.sprite)></label></div><div class="col col-9"><h1>{{ item.name }} <span class="text-green">({{item.qty}})</span></h1><ul class="item-props-list"><li v-bind:class="getItemPropColorClass(prop)" v-for="prop in item.props"><img class="item-prop-icon" v-bind:src="getItemPropIconSrc(prop)" width=16 height=16 />{{prop.name}}: {{prop.strength}}</li></ul></div></li></ul></div><div class="item-list-wrapper" v-if="showCard===2"><ul class="item-list recipe-list"><li v-for="recipe in recipes" class="row" v-bind:class="getRecipeItemCls(recipe)" v-on:click="onRecipeListRowClick(recipe)"><div class="col col-3 text-center"><img class="item-list-img" src="assets/images/recipe.png"></div><div class="col col-9"><h1>{{ recipe.name }}</h1><ul class="ingredient-list"><li v-for="ingredient in recipe.ingredients" v-bind:class="getHasIngredientCls(ingredient)"><span class="text-green">{{ingredient.name}}</span></li></ul><ul class="recipe-props-list item-props-list"><li v-bind:class="getItemPropColorClass(prop)" v-for="prop in recipe.props"><img class="item-prop-icon" v-bind:src="getItemPropIconSrc(prop)" width=16 height=16 />{{prop.name}}: {{prop.strength}}</li></ul></div></li></ul></div></div><template v-if="showBrewingCard===1"><div class="col col-7 new-brew"><h1>New brew</h1><img class="brew-image" src="assets/images/bottle.png"><ul class="mb-none" v-if="getCheckedItemNames().length"><li v-for="name in getCheckedItemNames()">{{name}}</li></ul><p v-bind:class="makeBrewOkMsgCls()" class="text-grey5">Select two or more ingredients from your inventory</p><div class="btn-wrapper mt-xl"><a class="pin-top pin-right btn btn-large btn-close" href="#" v-on:click.stop.prevent="hideWindow"></a><a v-bind:class="makeBrewOkCls()" class="btn btn-large btn-primary" href="#" v-on:click.stop.prevent="makeBrew">Brew</a></div></div></template><template v-if="showBrewingCard===2"><div class="col col-7 new-brew"><h2 class="mb-xxs text-grey6">You discovered</h2><h1 class="mt-xxs">{{newBrewName}}</h1><img class="brew-image" v-bind:src="newBrewImgUrl"><ul class="item-props-list"><li v-bind:class="getItemPropColorClass(prop)" v-for="prop in getNewBrewProps()"><img class="item-prop-icon" v-bind:src="getItemPropIconSrc(prop)" width=16 height=16 />{{prop.name}}: {{prop.strength}}</li></ul><p class="text-grey5"><a class="pin-top pin-right btn btn-large btn-close" href="#" v-on:click.stop.prevent="hideWindow"></a><a class="checkbox" v-bind:class="getSaveRecipeCheckedCls()" v-on:click.stop.prevent="toggleSaveRecipe"><span class="checkbox-icon"></span><span class="checkbox-label">Save the recipe so you can brew it again!</span></a></p><div class="btn-wrapper mt-xl"><a class="btn btn-large btn-secondary" href="#" v-on:click.stop.prevent="okNewBrew">Ok</a></div></div></template><template v-if="showBrewingCard===3"><div class="col col-7 new-brew"><h2 class="mb-xxs text-grey6">You brewed</h2><h1 class="mt-xxs">{{newBrewName}}</h1><img class="brew-image" v-bind:src="newBrewImgUrl"><ul class="item-props-list"><li v-bind:class="getItemPropColorClass(prop)" v-for="prop in getNewBrewProps()"><img class="item-prop-icon" v-bind:src="getItemPropIconSrc(prop)" width=16 height=16 />{{prop.name}}: {{prop.strength}}</li></ul><template v-if="showSaveRecipe"><p class="text-grey5"><a class="pin-top pin-right btn btn-large btn-close" href="#" v-on:click.stop.prevent="hideWindow"></a><a class="checkbox" v-bind:class="getSaveRecipeCheckedCls()" v-on:click.stop.prevent="toggleSaveRecipe"></a><span class="checkbox-icon"></span><span class="checkbox-label">Save the recipe so you can brew it again!</span></p></template><div class="btn-wrapper mt-xl"><a class="btn btn-large btn-grey2" href="#" v-on:click.stop.prevent="okNewBrew">Ok</a></div></div></template></div></div></div>',
            methods: {
                getItemPropColorClass: function(prop) {
                    return prop.strength < 0 ? "item-prop-poison" : "item-prop-cure";
                },
                getItemPropIconSrc: function(prop) {
                    return prop.strength < 0 ? "assets/images/icon-skull.png" : "assets/images/icon-heart.png";
                },
                toggleSaveRecipe: function() {
                    this.saveRecipe = !this.saveRecipe;
                },
                getSaveRecipeCheckedCls: function() {
                    return this.saveRecipe ? "checked" : "";
                },
                okNewBrew: function() {
                    this.nextRecipeToAdd && this.saveRecipe && (brew.recipeStore.dispatch("addRecipe", {
                        recipe: this.nextRecipeToAdd
                    }), this.nextRecipeToAdd = null), this.showBrewingCard = 1;
                },
                getNewBrewProps: function() {
                    return this.newBrewProps;
                },
                setItemFilter: function(filter) {
                    this.itemFilter = filter;
                },
                getItemTabCls: function() {
                    var cls = "";
                    return 1 === this.showCard && (cls = "active"), cls;
                },
                getRecipeTabCls: function() {
                    var cls = "";
                    return 2 === this.showCard && (cls = "active"), cls;
                },
                getFilterTabCls: function(filter) {
                    return this.itemFilter === filter ? "active" : "";
                },
                showItemsClick: function() {
                    this.showCard = 1;
                },
                showRecipesClick: function() {
                    this.showCard = 2;
                },
                makeBrewOkMsgCls: function() {
                    return this.checkedItems.length > 1 ? "hidden" : "";
                },
                makeBrewOkCls: function() {
                    return this.checkedItems.length > 1 ? "" : "disabled";
                },
                hideWindow: function() {
                    brew.eventHub.$emit("hideWindow");
                },
                getHasIngredientCls: function(ingredient) {
                    for (var ownedItems = this.getOwnedItems(), has = !1, i = 0; i < ownedItems.length; i++) ownedItems[i].id === ingredient.id && (has = !0);
                    return has ? "ingredient-ok" : "ingredient-missing";
                },
                onItemListRowClick: function(item) {
                    var index = this.checkedItems.indexOf(item.id);
                    this.checkedRecipes = [], index !== -1 ? this.checkedItems.splice(index, 1) : this.checkedItems.push(item.id);
                },
                onRecipeListRowClick: function(item) {
                    var index = this.checkedRecipes.indexOf(item.brewId), recipeIngredients = item.ingredients.map(function(ing) {
                        return ing.id;
                    });
                    this.getOwnedItems();
                    index !== -1 ? (this.checkedRecipes.splice(index, 1), this.checkedItems = []) : this.isRecipeBrewable(item) && (this.checkedRecipes.push(item.brewId), 
                    this.checkedItems = [], this.checkedItems = recipeIngredients);
                },
                isRecipeBrewable: function(recipe) {
                    for (var foundItems = 0, recipeIngredients = recipe.ingredients.map(function(ing) {
                        return ing.id;
                    }), owned = this.getOwnedItems(), i = 0; i < recipeIngredients.length; i++) for (var o = 0; o < owned.length; o++) owned[o].id === recipeIngredients[i] && foundItems++;
                    return recipeIngredients.length === foundItems;
                },
                hasAllRecipeIngredients: function(recipe) {
                    return !1;
                },
                getCheckedItemActiveCls: function(item) {
                    var checked = this.getCheckedItems(), cls = "";
                    if (checked.length > 0) {
                        var checkedIds = this.getCheckedItems().map(function(item) {
                            return item.id;
                        }).join(" ");
                        checkedIds.indexOf(item.id) !== -1 && (cls = "active");
                    }
                    return cls;
                },
                getRecipeItemCls: function(recipe) {
                    var checked = this.getCheckedRecipes(), cls = [];
                    if (this.isRecipeBrewable(recipe) || cls.push("not-brewable"), checked.length > 0) {
                        var checkedIds = this.getCheckedRecipes().map(function(recipe) {
                            return recipe.brewId;
                        }).join(" ");
                        checkedIds.indexOf(recipe.brewId) !== -1 && cls.push("active");
                    }
                    return cls.join(" ");
                },
                getCheckedItems: function() {
                    var items = this.items.filter(function(item) {
                        return this.checkedItems.indexOf(item.id) !== -1;
                    }.bind(this));
                    return items;
                },
                getCheckedRecipes: function() {
                    var recipes = this.recipes.filter(function(recipe) {
                        return this.checkedRecipes.indexOf(recipe.brewId) !== -1;
                    }.bind(this));
                    return recipes;
                },
                getCheckedItemNames: function() {
                    var items = this.getCheckedItems(), itemNames = items.map(function(item) {
                        return item.name;
                    });
                    return itemNames;
                },
                getSpriteUrl: function(sprite) {
                    return "assets/images/" + sprite + ".png";
                },
                resetRnd: function(seed) {
                    this.seed = seed;
                },
                rnd: function(max, min) {
                    max = max || 1, min = min || 0, this.seed = (9301 * this.seed + 49297) % 233280;
                    var rnd = this.seed / 233280;
                    return min + rnd * (max - min);
                },
                getRandom: function(max, min) {
                    var rndNum;
                    return min = min || 0, rndNum = Math.floor(this.rnd(max, min));
                },
                getRandomConsonant: function() {
                    var consonants = [ "b", "b", "c", "d", "d", "f", "f", "g", "g", "h", "j", "k", "k", "l", "l", "m", "m", "n", "n", "p", "p", "r", "r", "s", "s", "t", "t", "v", "w", "x", "z" ];
                    return consonants[this.getRandom(consonants.length)];
                },
                getRandomVowel: function() {
                    var vowels = [ "a", "a", "e", "e", "i", "i", "o", "o", "u", "u", "y" ];
                    return vowels[this.getRandom(vowels.length)];
                },
                getRandomNamePattern: function() {
                    var patterns = [ [ 1, 0, 1, 1, 0, 1 ], [ 1, 0, 1, 1, 0 ], [ 1, 0, 1, 1, 0, 1 ], [ 1, 0, 1, 0, 1, 0, 1 ], [ 1, 0, 1, 0, 1, 0 ], [ 1, 0, 1, 0, 1 ], [ 1, 0, 1, 0 ], [ 1, 0, 1 ], [ 0, 1, 0, 1, 0 ], [ 0, 1, 1, 0, 1, 0 ], [ 0, 1, 1, 0, 1 ] ], rnd = this.getRandom(patterns.length);
                    return patterns[rnd];
                },
                getNumberFromChar: function(char) {
                    for (var seedstring = char.split(""), result = [], i = 0; i < seedstring.length; i++) result.push("abcdefghijklmnopqrstuvwxyz".indexOf(seedstring[i]) + 1);
                    return result = result.sort(function(a, b) {
                        return a - b;
                    }), result.join("");
                },
                getRandomName: function(seed) {
                    this.resetRnd(this.getNumberFromChar(seed || 0));
                    for (var ret = (this.getRandom(10, 4), ""), pat = this.getRandomNamePattern(), prefixes = [ "Nectar of ", "Potion of ", "Medicine of ", "Blood of ", "Mixture of ", "Tonic of ", "Elixir of ", "Balsam of ", "Essence of " ], pre = prefixes[this.getRandom(prefixes.length)], i = 0; i < pat.length; i++) ret += 0 === pat[i] ? this.getRandomVowel() : this.getRandomConsonant(), 
                    0 === i && (ret = ret.toUpperCase());
                    return pre + ret;
                },
                makeBrew: function() {
                    var prop, itemsInStore, me = this, checked = me.checkedItems, itemlist = me.getCheckedItemList(checked), newItemProps = {}, newItem = {}, itemsUsed = [], propNames = {}, existsInStore = !1, minNbrOfIngredients = 2;
                    if (itemlist.length && itemlist.length >= minNbrOfIngredients) {
                        for (var i = 0; i < itemlist.length; i++) {
                            itemsUsed.push(itemlist[i].id);
                            for (var j = 0; j < itemlist[i].props.length; j++) prop = itemlist[i].props[j].prop, 
                            newItemProps[prop] ? newItemProps[prop] += itemlist[i].props[j].strength : (newItemProps[prop] = itemlist[i].props[j].strength, 
                            propNames[prop + "Name"] = itemlist[i].props[j].name);
                        }
                        if (itemlist.length > 1) for (var i = 0; i < itemlist.length; i++) if (itemlist[i].fortifies && itemlist[i].fortifies.length) for (var k = 0; k < itemlist[i].fortifies.length; k++) prop = itemlist[i].fortifies[k].prop, 
                        newItemProps[prop] && (newItemProps[prop] *= itemlist[i].fortifies[k].factor);
                        newItemProps = me.getTopProps(newItemProps, 3), newItem.name = this.getRandomName(itemsUsed.join("")), 
                        newItem.id = newItem.name.replace(/ /g, "").toLowerCase(), newItem.category = "brews", 
                        newItem.type = "brew", newItem.qty = 1, newItem.sprite = "brew" + me.getRandom(12, 1), 
                        newItem.spawntime = null, newItem.fortifies = [], newItem.props = [];
                        for (var key in newItemProps) newItem.props.push({
                            prop: key,
                            strength: newItemProps[key],
                            name: propNames[key + "Name"]
                        });
                        itemsInStore = brew.itemStore.getters.allItems;
                        for (var i = 0; i < itemsInStore.length; i++) itemsInStore[i].id === newItem.id && (existsInStore = !0, 
                        newItem.sprite = itemsInStore[i].sprite);
                        if (existsInStore) {
                            console.log("No new recipe"), this.newBrewImgUrl = "assets/images/" + newItem.sprite, 
                            this.showSaveRecipe = !1, brew.itemStore.dispatch("addBrewedItem", {
                                id: newItem.id,
                                qty: 1
                            }), this.showBrewingCard = 3;
                            for (var isKnownRecipe = !1, r = 0; r < this.recipes.length; r++) this.recipes[r].brewId === newItem.id && (isKnownRecipe = !0);
                            isKnownRecipe || (this.showSaveRecipe = !0), this.newBrewProps = newItem.props, 
                            this.newBrewName = newItem.name;
                        } else {
                            console.log("New recipe"), brew.itemStore.dispatch("addNewBrewedItem", {
                                item: newItem
                            }), this.showBrewingCard = 2, this.showSaveRecipe = !0, this.newBrewProps = newItem.props, 
                            this.newBrewName = newItem.name, this.newBrewImgUrl = "assets/images/" + newItem.sprite;
                            var newRecipe = {
                                name: newItem.name,
                                brewId: newItem.id,
                                props: newItem.props.map(function(prop) {
                                    return {
                                        id: prop.prop,
                                        name: prop.name,
                                        strength: prop.strength
                                    };
                                }),
                                sprite: newItem.sprite,
                                ingredients: itemlist.map(function(ingredient) {
                                    return {
                                        id: ingredient.id,
                                        name: ingredient.name,
                                        sprite: ingredient.sprite
                                    };
                                })
                            };
                            this.nextRecipeToAdd = newRecipe, this.saveRecipe = !0;
                        }
                        me.checkedItems = [], me.checkedRecipes = [];
                        for (var i = 0; i < itemsUsed.length; i++) brew.itemStore.dispatch("deleteItem", {
                            itemId: itemsUsed[i]
                        });
                        console.log("New brew!"), console.log(this.getRandomName(itemsUsed.join(""))), console.log(newItemProps), 
                        console.log(newItem), console.log("----------");
                    } else console.log("Select ingredients to make a brew");
                },
                getTopProps: function(obj, nbr) {
                    console.log(obj);
                    var sortable = [], ret = {};
                    for (var key in obj) sortable.push({
                        prop: key,
                        strength: obj[key]
                    });
                    sortable.sort(function(a, b) {
                        var astrength = a.strength < 0 ? a.strength * -1 : a.strength, bstrength = b.strength < 0 ? b.strength * -1 : b.strength;
                        return bstrength - astrength;
                    }), sortable.length > nbr && sortable.splice(nbr, sortable.length);
                    for (var i = 0; i < sortable.length; i++) ret[sortable[i].prop] = sortable[i].strength;
                    return ret;
                },
                getCheckedItemList: function(checked) {
                    var allItems = brew.itemStore.getters.allItems, checkedItems = allItems.filter(function(item) {
                        return checked.indexOf(item.id) !== -1;
                    });
                    return checkedItems;
                },
                getOwnedItems: function() {
                    return this.items.filter(function(item) {
                        return item.qty > 0;
                    }.bind(this));
                },
                getFilteredOwnedItems: function() {
                    var ret, filter = this.itemFilter, owned = this.getOwnedItems(), filters = [ "all", "animalia", "plantae", "fungi", "mineral", "brews" ];
                    return 0 === filter && (ret = owned), filter > 0 && (ret = owned.filter(function(item) {
                        return item.category === filters[filter];
                    }.bind(this))), ret;
                }
            },
            created: function() {}
        });
    }
};

brew.init();

var medicmenu = {
    initEventHub: function() {
        this.eventHub = new Vue();
    },
    init: function() {
        this.initComponents(), new Vue({
            el: "#mainmenu",
            created: function() {
                medicmenu.eventHub.$on("continue", function(options) {
                    this.show = !1, this.showSettings = !1;
                }.bind(this)), medicmenu.eventHub.$on("showMainMenu", function(options) {
                    this.show = !0, this.showSettings = !1, this.gameStarted = !1;
                }.bind(this)), medicmenu.eventHub.$on("showSettingsMenu", function(options) {
                    this.show = !1, this.showSettings = !0;
                }.bind(this)), this.soundOn = this.getSoundOn(), this.musicOn = this.getMusicOn();
            },
            data: {
                show: !0,
                showSettings: !1,
                soundOn: !0,
                musicOn: !0,
                gameStarted: !1
            },
            computed: {
                backdropHeight: function() {
                    return Utils.ScreenUtils.screenMetrics.windowHeight + "px";
                },
                backdropWidth: function() {
                    return Utils.ScreenUtils.screenMetrics.windowWidth + "px";
                },
                backdropCls: function() {
                    return this.gameStarted ? "backdrop" : "";
                }
            },
            template: '<div><div v-if="show" class="medic-menu"><a href="#" v-bind:class="getContinueCls()" class="btn btn-mainmenu text-primary" v-on:click.stop.prevent="onContinueClick">Continue</a><a href="#" class="btn btn-mainmenu" v-on:click.stop.prevent="onNewGameClick">New game</a><a href="#" class="btn btn-mainmenu" v-on:click.stop.prevent="onSettingsClick">Settings</a></div><div v-if="showSettings" v-bind:class="backdropCls" v-bind:style="{height: backdropHeight, width: backdropWidth}"><div class="medic-menu"><a href="#" class="btn btn-mainmenu text-primary" v-on:click.stop.prevent="onSettingsBackClick">Back</a><a href="#" v-bind:class="getSoundCls()" class="btn btn-mainmenu" v-on:click.stop.prevent="onToggleSoundClick">Sound: {{getSoundStatusText()}}</a><a href="#" v-bind:class="getMusicCls()" class="btn btn-mainmenu" v-on:click.stop.prevent="onToggleMusicClick">Music: {{getMusicStatusText()}}</a><a v-if="gameStarted" href="#" class="btn btn-mainmenu text-red" v-on:click.stop.prevent="onQuitGameClick">Quit</a></div></div></div>',
            methods: {
                getSoundOn: function() {
                    var sound = localStorage.getItem("medic-sound");
                    return !(!sound || "" === sound || "off" === sound);
                },
                getMusicOn: function() {
                    var music = localStorage.getItem("medic-music");
                    return !(!music || "" === music || "off" === music);
                },
                onQuitGameClick: function() {
                    this.showSettings = !1, brew.eventHub.$emit("displayMessage", {
                        msgHeader: "Quit",
                        msg: "Are you sure? All unsaved progress will be lost.",
                        scope: this,
                        buttons: [ "NO", "YES" ],
                        closeCallback: function(btn) {
                            "YES" === btn && (brew.eventHub.$emit("quitgame"), brew.eventHub.$emit("hideTopMenu"), 
                            medicmenu.eventHub.$emit("showMainMenu"));
                        }
                    });
                },
                onNewGameClick: function() {
                    this.show = !1, this.gameStarted = !0, medicmenu.eventHub.$emit("startnewgame");
                },
                onContinueClick: function() {
                    this.show = !1, this.gameStarted = !0, medicmenu.eventHub.$emit("continue");
                },
                onSettingsClick: function() {
                    this.gameStarted = !1, medicmenu.eventHub.$emit("showSettingsMenu");
                },
                onToggleSoundClick: function() {
                    this.getSoundOn() ? (localStorage.setItem("medic-sound", "off"), this.soundOn = !1) : (localStorage.setItem("medic-sound", "on"), 
                    this.soundOn = !0);
                },
                onToggleMusicClick: function() {
                    this.getMusicOn() ? (localStorage.setItem("medic-music", "off"), audioplayer.stopMusic(500), 
                    this.musicOn = !1) : (localStorage.setItem("medic-music", "on"), this.musicOn = !0, 
                    gameSession.levelMusic && audioplayer.playMusic(gameSession.levelMusic));
                },
                onSettingsBackClick: function() {
                    this.showSettings = !1, this.gameStarted ? this.show = !1 : this.show = !0;
                },
                getSoundCls: function() {
                    return "";
                },
                getMusicCls: function() {
                    return "";
                },
                getSoundStatusText: function() {
                    return this.soundOn ? "ON" : "OFF";
                },
                getMusicStatusText: function() {
                    return this.musicOn ? "ON" : "OFF";
                },
                getContinueCls: function() {
                    var cls = "hidden";
                    return localStorage.getItem("medic-save") && "" !== localStorage.getItem("medic-save") && (cls = ""), 
                    cls;
                }
            }
        });
    },
    initComponents: function() {}
};

medicmenu.initEventHub();