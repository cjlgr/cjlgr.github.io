/*! console by Carl-Johan Elger 2015-12-20 */
(function() {
    $(document).ready(function() {
        function runScript() {
            var res, ret, $field = $("#input"), val = $field.val();
            if ("" === val) return void $("#input").focus();
            entryId = new Date().getTime(), history["rep-" + entryId] = val, historyIndex.push("rep-" + entryId), 
            historyStep = historyIndex.length - 1, localStorage.setItem("console-history", val), 
            $field.val(""), res = sandbox.evaluate(val), res.error ? ret = getFormattedError(res.error) : (ret = JSON.stringify(res.result), 
            "undefined" == typeof res && (ret = "undefined"), retres = '<div class="log-result">' + ret + "</div>", 
            conoselDump.length ? (ret = conoselDump.map(function(row) {
                return '<div class="log-result">' + JSON.stringify(row) + "</div>";
            }).join(""), conoselDump = [], ret += retres) : ret = retres);
            var uiFormatted = val.replace(/(?:\r\n|\r|\n)/g, "<br />"), userInput = '<div class="log-input">' + uiFormatted + '<a href="#" class="input-replay" data-replayid="rep-' + entryId + '"><i class="fa fa-repeat"></i></a></div>', out = '<div class="log-item">' + userInput + ret + "</div>";
            $("#output .output-inner").prepend(out);
            var innerHeight = $("#output .output-inner").height();
            $("#output").scrollTop(innerHeight);
        }
        function handleTab(field, e) {
            var start = field.selectionStart;
            end = field.selectionEnd;
            var $this = $(field);
            $this.val($this.val().substring(0, start) + "    " + $this.val().substring(end)), 
            field.selectionStart = field.selectionEnd = start + 4;
        }
        function insertForLoop() {
            var expr = "for(var i = 0; i < 10; i++){\n\n}";
            insertExpressionString(expr);
        }
        function insertIfElse() {
            var expr = "if(){\n\n} else {\n\n}";
            insertExpressionString(expr);
        }
        function insertExpressionString(expr) {
            var $field = $("#input"), start = $field[0].selectionStart, end = $field[0].selectionEnd, insertExpression = expr;
            $field.val($field.val().substring(0, start) + insertExpression + $field.val().substring(end));
            var marker = start + insertExpression.length;
            $field[0].selectionStart = marker, $field[0].selectionEnd = marker, $field.focus();
        }
        function getFormattedError(error) {
            var stackid = "id-" + new Date().getTime(), ret = '<div class="log-error"><div class="error-title"><a href="#' + stackid + '" role="button" data-toggle="collapse" aria-expanded="false" aria-controls="' + stackid + '">' + error.name + ": " + error.message + "</a></div>", stack = error.stack.split("\n").map(function(line) {
                return line.trim();
            });
            return stack.splice(0, 1), stack = stack.join("<br>"), ret += '<div class="error-body collapse" id="' + stackid + '">' + stack + "</div></div>";
        }
        function onSaveAsClick() {
            var newName = $("#scriptNameInput").val();
            $("#scriptNameInput").val(""), saveScript(newName), $("#saveModal").modal("hide");
        }
        function saveScript(_name, overwrite) {
            var scriptName = _name, scriptBody = $("#input").val(), saveObj = {
                name: scriptName,
                body: scriptBody
            }, stored = localStorage.getItem("console-saved");
            if (stored) {
                if (storedObj = JSON.parse(stored), overwrite) for (var m = 0; m < storedObj.length; m++) storedObj[m].id === currentlyLoaded.id && (saveObj.id = currentlyLoaded.id, 
                storedObj[m] = saveObj); else saveObj.id = storedObj.length, storedObj.push(saveObj);
                tmpJson = JSON.stringify(storedObj), localStorage.setItem("console-saved", tmpJson);
            } else saveObj.id = 0, tmpSaved = [ saveObj ], tmpJson = JSON.stringify(tmpSaved), 
            localStorage.setItem("console-saved", tmpJson);
            currentlyLoaded = {
                id: saveObj.id,
                name: saveObj.name
            }, displayCurrentlyLoaded(saveObj.id, saveObj.name), $(".notification").show(), 
            setTimeout(function() {
                $(".notification").fadeOut();
            }, 1500);
        }
        function displayCurrentlyLoaded(id, title) {
            $(".currentlyLoaded").text(title).show();
        }
        function onNewClick() {
            $(".currentlyLoaded").text("").hide(), currentlyLoaded = null, $("#input").val("");
        }
        function toggleTheme(theme) {
            "light" === theme ? ($("#themeLight .fa").css("visibility", "visible"), $("#themeDark .fa").css("visibility", "hidden"), 
            localStorage.setItem("console-theme", "light"), $("body").removeClass("dark").addClass("light")) : ($("#themeLight .fa").css("visibility", "hidden"), 
            $("#themeDark .fa").css("visibility", "visible"), localStorage.setItem("console-theme", "dark"), 
            $("body").removeClass("light").addClass("dark"));
        }
        var currentlyLoaded = null, history = {}, historyIndex = [], historyStep = 0, conoselDump = [], theme = localStorage.getItem("console-theme");
        theme && toggleTheme(theme);
        var iframe = document.createElement("iframe");
        iframe.style.display = "none", document.body.appendChild(iframe), frames[frames.length - 1].document.write("<script>var MSIE/*@cc_on =1@*/;function Evaluator(cons) {this.cons = cons;}Evaluator.prototype.evaluate = function (str) {try {var console = this.cons;var result = {result: (function(){ return eval(str)}())};return result;} catch (e) {return {error: e};}};var cons = { log: function (m){ parent.conosel(m);}};var evaler = new Evaluator(cons);parent.sandbox = MSIE ? this : evaler</script>"), 
        window.conosel = function(msg) {
            conoselDump.push(msg);
        }, $(document).on("click", ".input-replay", function(e) {
            var $this = $(this), repid = $this.attr("data-replayid"), val = history[repid];
            $("#input").val(val), $("#input").focus();
        }), $("#input").keydown(function(e) {
            if (38 === e.keyCode && "" === $("#input").val()) {
                var historicValue = history[historyIndex[historyStep]];
                historicValue || (historicValue = localStorage.getItem("console-history")), $("#input").val(historicValue), 
                historyStep--, e.preventDefault();
            }
            return 9 === e.keyCode ? (handleTab(this, e), !1) : 13 === e.keyCode && e.shiftKey ? (runScript(), 
            !1) : void (13 === e.keyCode && !e.shiftKey);
        }), $(".insertFor").on("click", function() {
            insertForLoop();
        }), $(".insertIfElse").on("click", function() {
            insertIfElse();
        }), $(".insertConsoleLog").on("click", function() {
            insertExpressionString("console.log()");
        }), $(".insertParStart").on("click", function() {
            insertExpressionString("(");
        }), $(".insertParEnd").on("click", function() {
            insertExpressionString(")");
        }), $(".insertCurlyStart").on("click", function() {
            insertExpressionString("{");
        }), $(".insertCurlyEnd").on("click", function() {
            insertExpressionString("}");
        }), $(".insertBracketStart").on("click", function() {
            insertExpressionString("[");
        }), $(".insertBracketEnd").on("click", function() {
            insertExpressionString("]");
        }), $(".insertAssign").on("click", function() {
            insertExpressionString("=");
        }), $(".clearAll").on("click", function() {
            $("#input").val("").focus();
        }), $(".replayLast").on("click", function() {
            var historicValue = history[historyIndex[historyStep]];
            historicValue || (historicValue = localStorage.getItem("console-history")), $("#input").val(historicValue), 
            historyStep--, $("#input").focus();
        }), $(".execute").on("click", function() {
            runScript();
        }), $("#saveAsSave").on("click", function() {
            onSaveAsClick();
        }), $("#saveBtn").on("click", function() {
            currentlyLoaded ? saveScript(currentlyLoaded.name, !0) : $("#saveModal").modal("show");
        }), $("#newBtn").on("click", function() {
            onNewClick();
        }), $("#loadModal").on("shown.bs.modal", function(e) {
            var stored = localStorage.getItem("console-saved");
            if (stored) {
                storedObj = JSON.parse(stored);
                var html = storedObj.map(function(item) {
                    return '<li class="clear"><div class="btn-group block pull-left full-width saved-item-group"><span class="pull-left saved-item-name">' + item.name + '</span><a class="pull-right btn btn-danger delete-saved-item" data-savedid="' + item.id + '"><i class="fa fa-trash"></i></a><a class="pull-right btn btn-primary saved-item" data-savedid="' + item.id + '">open</a></div></li>';
                }).join("");
                $(".storedscripts").html(html);
            }
        }), $(document).on("click", ".delete-saved-item", function(e) {
            $this = $(this);
            var deleteId = $this.attr("data-savedid"), stored = localStorage.getItem("console-saved");
            if (stored) {
                for (var storedObj = JSON.parse(stored), d = 0; d < storedObj.length; d++) storedObj[d].id == deleteId && (storedObj.splice(d, 1), 
                deleteId == currentlyLoaded.id && (currentlyLoaded = null, $(".currentlyLoaded").hide()));
                var storeString = JSON.stringify(storedObj);
                localStorage.setItem("console-saved", storeString);
                var html = storedObj.map(function(item) {
                    return '<li class="clear"><div class="btn-group block pull-left full-width saved-item-group"><span class="pull-left saved-item-name">' + item.name + '</span><a class="pull-right btn btn-danger delete-saved-item" data-savedid="' + item.id + '"><i class="fa fa-trash"></i></a><a class="pull-right btn btn-primary saved-item" data-savedid="' + item.id + '">open</a></div></li>';
                }).join("");
                $(".storedscripts").html(html);
            }
        }), $(document).on("click", ".saved-item", function(e) {
            $this = $(this);
            var savedId = $this.attr("data-savedid"), stored = localStorage.getItem("console-saved");
            if (stored) {
                var storedObj = JSON.parse(stored), fetched = storedObj.filter(function(obj) {
                    return obj.id == savedId;
                })[0];
                $("#input").val(fetched.body), $("#loadModal").modal("hide"), currentlyLoaded = {
                    id: fetched.id,
                    name: fetched.name
                }, displayCurrentlyLoaded(fetched.id, fetched.name);
            }
        }), $("#themeLight").on("click", function() {
            toggleTheme("light");
        }), $("#themeDark").on("click", function() {
            toggleTheme("dark");
        });
    });
}).call(this);